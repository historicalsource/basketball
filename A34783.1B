	.TITLE BBROBT-ROBOT ROUTINE
	.SBTTL **************************
	.SBTTL *
	.SBTTL *	PROGRAMMER: DOWNEND
	.SBTTL *
	.SBTTL *************************
	.REPT 0
	DESCRIPTION: ROBOT CONTROL .I.E. ONE PLAYER
		     GAME. CALLED FROM MAIN LOOP OF
		     BASKETBALL-SEE BBALL.MAC. SIMULATES
		     ROBOT MOVEMENT BY JAMMING NUMBERS
		     INTO CHPHT,CVPHT SIMIALAR TO THOSE
		     PRODUCED BY TRAKBL.
	.ENDR
	.RADIX 16
	.CSECT
	.PAGE
	.SBTTL EXTERNAL REFERENCES
	.GLOBL	ROBOTS
	.GLOBL	BNDCHK,RANDU,BADIVD
	.GLOBL	PN,PSTAT,GSTAT,BALCOD
	.GLOBL	FREFLG,COLFLG,LEADER,COLFGH
	.GLOBL	MVCOMP,PUTERD,PUTERV,SCOUNT,SMARTS,PUTERH
	.GLOBL	DSHT,CHPPH,CPICP,RLHPBL,VFLRBL,CVPPH
	.GLOBL	TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7
	.GLOBL	CVPHT,CVPPL,CHPHT,CHPPL
	.GLOBL PCOLFG,TBHD,SPEED,SPEDS
	.GLOBL ROBDEL,SCORE,BALREP
	.GLOBL ROBJMP,SLEWFG
	.GLOBL CHK6,CHK7
	.PAGE
	.SBTTL	MAIN ROUTINE
	.REPT 0
*************************
*
*	MAIN ROUTINE
*
*************************
	DESCRIPTION:	CALCULATE MOVES FOR ROBOT OR DRONE PLAYERS
			BASIC DECISION TREE:
				HAVE BALL?
				1.YES
				 A. SELECT A RANDOM MOVE AND MOVE TO THAT SPOT
				 B. WITHIN RANGE OF BASKET?
					YES: SHOOT
					NO: GO TO 1A
				2.NO:
				 A. MOVE TOWARDS BALL
				 B. WITHING RANGE OF BALL?
					YES: JUMP TO CAPTURE
					NO: GO 2A
	REGISTERS:
		IN:	DONT CARE
		OUT:	BLITZED
	STACK USED:	2 BYTES
	.ENDR
ROBOTS:
	LDA Z,GSTAT
	BMI 1$
	RTS
1$:	LDX I,PN
LOOP:	LDA ZX,PSTAT
	ASL
	BMI 10$			;BRANCH IF A PLAYER
	BIT Z,GSTAT
	BVS 10$			;BRANCH IF CREDIT MODE
	LDA Z,FREFLG
	BEQ 20$			;BRANCH IF NOT FREEZE MODE
10$:	JMP NEXT2
20$:	LDA Z,BALCOD
	BPL 40$			;BRANCH IF BALL IS FREE
30$:	AND I,3
	STA Z,TEMP1
	CPX Z,TEMP1
	BEQ HAVEBL
40$:	JMP NOBALL		;GO TO NOBALL IF OPPONENT HAS BALL
HAVEBL:				;ELSE YOU HAVE THE BALL
	LDA AX,MVCOMP
	BMI 50$			;BRANCH IF MOVE IS COMPLETE
	LDA I,0
	STA A,SLEWFG		;MAKE SURE SLEW IS TURNED OFF SO
				;ADDMOV WORDS PROPERLY
	JSR ADDMOV		;ELSE ADD DISPLACEMENTS TO POSITION
				;(SIMILAR TO TRAKBL)
	LDA ZX,COLFLG
	BEQ 30$			;BRANCH IF MOVE DID NOT CAUSE A BOUNDARY CHECK
	LDA AX,COLFGH
	BEQ 25$			;BRANCH IF NO TOP WALL COLLISION
	CPX I,0
	BEQ 10$
	LDA ZX,CHPPH
	BMI 16$			;PATCH TO FIX ROBOT STUCK IN CORNER BUG
	LDA AX,PUTERH
	BPL 15$
	EOR I,0FF
	BPL 15$
10$:	LDA AX,PUTERH
	BMI 15$
	EOR I,0FF
15$:	STA AX,PUTERH		;MAKE SURE ROBOT MOVES AWAY FROM
				;SIDE BOUNDS IF IN COLLISION
16$:	LDA I,1F
	STA AX,PUTERD
	BPL 70$			;BRA
25$:	LDA I,80		;ELSE MAKE CURRENT MOVE COMPLETE
	STA AX,MVCOMP
	BMI 70$			;BRA
30$:	DEC AX,PUTERD
	BPL 70$			;BRANCH IF CURRENT MOVE IS STILL IN PROGRESS
	BMI 25$			;(BRA) ELSE SET FLAG SAYING "MOVE, COMPLETE"
50$:				;CURRENT MOVE IS COMPLETE/CHECK FOR SHOOTING
				;RANGE/CALCULATE NEW MOVE PARAMETERS
	LDA ZX,CVPPH
	CMP I,50
	BCC 57$			;BRANCH IF ROBOT BELOW "50"
	LDA ZX,CHPPH
	CPX I,0
	BEQ 55$
	EOR I,0FF
55$:	CMP I,0E0
	BCS 56$			;BRANCH IF SUBTRACTING WOULD CAUSE WRAPPING
	CMP I,20
	BCC 56$			;   "   "      "        "      "      "
	SEC
	SBC I,20
56$:	PHA
	PLA			;SET FLAGS ON BASIS OF ACC, NOT THE COMPARES.
	BMI SHOOT		;BRANCH IF WITHIN SHOOTING RANGE
				;ELSE CALCULATE NEW MOVE PARAMETERS
57$:	CLC
	ROR ZX,DSHT		;CLEAR SHOOT BUTTON STATUS
	LDA I,0
	STA AX,MVCOMP		;CLEAR "MOVE COMPLETE" FLAG
	JSR RANDU
	AND I,0F
	CPX I,0
	BNE 60$
	PHA			;IF PLAYER=0(GOING RIGHT) SO PUTERH MUST POS
	PLA
	BPL 65$
	EOR I,0FF
	BPL 65$			;BRA
60$:	PHA			;PLAER=1(GOING LEFT) SO JPUTERH MUST BE NEG.
	PLA
	BMI 65$
	EOR I,0FF
65$:	STA AX,PUTERH
	JSR RANDU
	AND I,1F
	CLC
	ROR
	BCC 67$
	EOR I,0FF		;MAKE PUTERV POS OR NEG RANDOMLY
67$:	STA AX,PUTERV
	JSR RANDU
	CMP I,10
	BCS 66$
	ASL
	ASL
	ASL
	ASL
66$:	AND I,3F
	STA AX,PUTERD
70$:	JMP NEXT
SHOOT:				;IN POSITION TO SHOOT, CALCULATE PARMETERS
				;TO GET A BASKET, SEE IF IN POSTION AND RELEASE
	SEC
	ROR ZX,DSHT		;MAKE SHOOT BUTTON APPEAR TO BE PUSHED
	LDA ZX,CPICP
	AND I,3F
	LSR
	CMP I,8			;SEE IF SHOOT PICTURE HAS BEEN PUT IN
	BCC 5$			;BRANCH IF IT HAS
	LDA ZX,DSHT
	AND I,0FE
	STA ZX,DSHT		;BULLET-PROOF SHOOT BUTTON OPERATION
5$:	LDA ZX,CHPPH
	BPL 10$
	EOR I,0FF		;NOW: 0XXX XXXX
10$:	LSR			;NOW: 00XX XXXX
	LSR			;NOW: 000X XXXX
	LSR			;NOW: 0000 XXXX
	LSR			;NOW: 0000 0XXX
	STA Z,TEMP1
	LDA ZX,CVPPH
	SEC
	SBC I,7F
	BPL 12$
	EOR I,0FF
12$:	LSR
	LSR
	LSR
	LSR
	CLC
	ADC Z,TEMP1		;ADD VERTICAL TO HORIZONTAL
	LDY ZX,CVPPH
	BPL 15$
	ORA I,10		;SET "ABOVE" CENTER BIT
15$:
	TAY
	LDA AY,ARMTAB		;USE SCALED HPOS OF PLAYER TO FIND
	STA Z,TEMP1		;OUT WHICH FORCE WILL RESULT IN A SUCCESSFUL
	LDA ZX,CPICP		;BASKET
	AND I,3F
	LSR			;GET A LOGICAL SHOOT NUMBER (0-7)
	CMP Z,TEMP1
	BNE 20$			;BRANCH IF NOT READY TO RELEASE
	LDA I,1			;ELSE RELEASE!!!
	STA ZX,DSHT		;MAKE SHOOT BUTTOM LOOK LIKE IT WAS RELEASE
	LDA I,4
	STA AX,ROBDEL		;SLOW ROBOT DOWN AFTER SHOOTING A BASKET SO
				;HE DOESNT ZIP ALL OVER THE SCREEN.
20$:	JMP NEXT
				;
NOBALL:				;EITHER BALL IS FREE OR OPPONENT
				;HAS IT - IN ANY CASE, CHASE IT
	CLC
	ROR ZX,DSHT
	LDA I,80
	STA AX,MVCOMP		;SET FLAG USED DURING "HAVEBL"
	LDA AX,SCOUNT		;SCOUNT ADDS HYSTERISIS TO ROBOT MOVEMENT SO HE DOESNT
				;JITTER WHEN CLOSE TO BALL
	BEQ 5$
	DEC AX,SCOUNT
	BEQ 5$			;BRANCH IF NOT TIME TO UPDATE DIRECTION
	JMP 90$
5$:				;SLOW-DOWN "HUNT" SO THERE'S NO JITTER
	LDA I,18
	LDY A,PCOLFG
	BEQ 6$			;BRANCH IF NOT COLLIDING WITH OTHER PLAYER
	AND I,10		;ELSE SHORTEN "BLIND" TIME SO ROBOT STAYS CLOSE
				;TO PLAYER WITH BALL.
6$:	STA AX,SCOUNT
				;CALCULATE NEW SLOPE FOR RATE COUNTERS
	LDA Z,RLHPBL
	LSR
	STA Z,TEMP4
	LDA ZX,CHPPH
	LSR
	SEC
	SBC Z,TEMP4
	BPL 10$
	EOR I,0FF
	CLC
	ADC I,1
	LDY I,0FF		;Y=POS/NEW FLAG
	BMI 11$			;Y=POS=BALL IS LEFT
10$:	LDY I,0
11$:	PHA
	LDA A,PCOLFG
	BEQ 12$
	LDA I,0
	STA A,PCOLFG
	TYA
	EOR I,0FF		;INVERT DIRECTION IF PLAYER COLLISION
	TAY
	LDA ZX,CVPHT
	CLC
	ADC I,7
	STA ZX,CVPHT		;ADD 7 TO VERTICAL SO DRONE WILL HOP TO FRONT
12$:	PLA
	STY Z,TEMP5		;DIRECTION TO MOVE
	STA Z,TEMP1		;TEMP1=DELTA HPOS
	LDA Z,VFLRBL
	LSR
	STA Z,TEMP4
	LDA ZX,CVPPH
	LSR
	SEC
	SBC Z,TEMP4
	BPL 20$
	EOR I,0FF
	CLC
	ADC I,1
	LDY I,0FF
	BMI 21$			;Y=POS=BALL IS BELOW
20$:	LDY I,0
21$:	STY Z,TEMP6		;DIRECTION TO MOVE
	STA Z,TEMP1+1		;TEMP1+1=DELTA VPOS
	JSR BADIVD		;CALCULATE SLOPE TO BALL FROM PLAYER
	LDA AX,ROBDEL
	BEQ 30$
	DEC AX,ROBDEL
	BNE 35$			;BRANCH AROUND MULT. IF DELAY COUNTER IS RUNNING
30$:	LDA Z,TEMP1
	ASL Z,TEMP1
	CLC
	ADC Z,TEMP1
	STA Z,TEMP1
	LDA Z,TEMP1+1
	ASL Z,TEMP1+1		;MULT. TO INCREASE SPEED A BIT
	CLC
	ADC Z,TEMP1+1
	STA Z,TEMP1+1
35$:	LDY Z,TEMP5
	BPL 40$			;BRANCH IF BALL IS TO LEFT OF PLAYER
	LDA Z,TEMP1		;ELSE TO RIGHT SO PUTERH MUST BE POSITIVE
	BPL 50$
	EOR I,0FF
	CLC
	ADC I,1
	BPL 50$
40$:	LDA Z,TEMP1		;BALL TO LEFT SO PUTERH MUST BE NEG
	BMI 50$
	EOR I,0FF
	CLC
	ADC I,1
50$:	STA AX,PUTERH
	LDY Z,TEMP6
	BPL 70$			;BRANCH IF BALL IS BELOW PLAYER
	LDA Z,TEMP1+1		;ELSE BALL IS ABOVE SO PUTERV MUST BE POSITIVE
	BPL 80$
	EOR I,0FF
	CLC
	ADC I,1
	BPL 80$
70$:	LDA Z,TEMP1+1		;BALL IS BELOW PLAYER SO PUTERV MUST BE NEG.
	BMI 80$
	EOR I,0FF
	CLC
	ADC I,1
80$:	STA AX,PUTERV
90$:	JSR ADDMOV		;ADD DISPLACEMENTS IN PUTERV, H TO POSITIVE
				;
				;
NEARBL:				;CHECK IF PLAYER IS NEAR BALL. IF SO,
				;JUMP IN AIR TO CAPTURE OR BLOCK
	TXA
	EOR I,1
	TAY
	BIT Z,BALCOD
	BVC 10$			;BRANCH IF OPPONENT NOT SHOOTING
	LDA ZX,DSHT
	BNE 10$			;DON'T FORCE JUMP TIL SHOOT BUTTON BYTE IS CLEARED
	LDA ZX,SCORE+2		;CHECK TENS DIGIT
	CMP AY,SCORE+2
	BEQ 5$
	BCS 10$			;BRANCH IF ROBOT IS AHEAD
5$:	LDA AY,SCORE
	SEC
	SBC ZX,SCORE		;CHECK ONES DIGIT
	BMI 10$			;BRANCH IF ROBOT IS AHEAD
	CMP I,10
	BCC 20$			;BRANCH IF BEHIND BUT BY .LT. 10
				;ELSE ROBOT LOSING BY MORE THAN 10 
				;SO ALLOW BLOCKING
6$:	LDA I,0FE
	STA AX,ROBJMP
	STA ZX,DSHT		;0FE WILL INITIATE "JUMP"
10$:
	BMI NEXT		;BRA
20$:
	CMP I,4
	BCC 30$			;BRANCH IF ROBOT LOSING BY LESS THAN 4
	LDA AX,ROBJMP		;ELSE SEE IF ROBJMP IS SET
	BMI 6$			;BRANCH IF SET - .IE. JUMP TO BLOCK
30$:	LDA I,0
	STA AX,ROBJMP		;CLEAR JUMP/BLOCK FLAG
NEXT:
				;JAM 'MOVE" AND "L/R" BITS INTO PSTAT
	LDA ZX,PSTAT
	AND I,0FC		;CLEAR MOVING AND L/R BIT
	STA ZX,PSTAT
	LDA AX,PUTERH
	SEC			;ALWAYS SET MOVING BIT
	ROL
	ROL			;SET L/R BIT BASED ON SIGN OF PUTERH
	AND I,3
	ORA ZX,PSTAT
	STA ZX,PSTAT
NEXT2:	DEX
	BMI 10$
	JMP LOOP		;DO IT AGAIN FOR NEXT PLAYER
10$:				;BEFORE LEAVING, ADJUST SPEED
	LDX I,PN
12$:	TXA
	EOR I,1
	TAY
	LDA Z,BALCOD
	BPL 20$			;BRANCH IF BALL IS FREE
	AND I,1
	STA Z,TEMP1
	CPX Z,TEMP1
	BNE 15$			;BRANCH IF YOU DONT HAVE BALL
	LDA ZX,SCORE+2
	CMP AY,SCORE+2		;CHECK HIGH DIGITS (TENS)
	BEQ 14$
	BCS 15$			;BRANCH IF YOUR SCORE IS GREATER
14$:	LDA AY,SCORE
	SEC
	SBC ZX,SCORE		;CHECK LOW DIGITS (ONES)
	BMI 15$			;BRANCH IF YOUR'RE AHEAD
	CMP I,2
	BCC 15$			;BRANCH IF LESS THAN 2 AHEAD
	LDA I,4			;ELSE OPPONENT LEADS BY MORE THAN 2
	BPL 16$
15$:	LDA I,3
16$:	STA AX,SPEED
20$:	DEX
	BPL 12$
	RTS
	.BYTE CHK6
ARMTAB:
	.BYTE 0,1,1,3,3,5,6,7
	.BYTE 5,5,5,6,6,7,7,7
	.BYTE 0,1,1,3,3,5,5,5
	.BYTE 5,7,5,5,5,6,7,7
	.PAGE
	.SBTTL ADD-IN-MOVE(ROBOT)
	.REPT 0
*************************
*
*	ADDMOV
*
*************************
	DESCRIPTION:	SCALE AND ADD IN COMPUTER MOVES TO
			PLAYER POSITIONS, I.E. CHPPL,CHPHT AND
			CVPPL,CVPHT
	REGISTERS:
		IN:	X=PLAYER #
			PUTERH=RAW HORIZONTAL MOVEMENT (SIGNED)
			PUTERV=RAW VERTICAL MOVEMENT (SIGNED)
			SMARTS=SCALING FACTOR TO DETERMINE SPEED
		OUT:	X=PLAYER #, Y BLITZED
	.ENDR
ADDMOV:
	LDA A,SLEWFG
	BPL 5$			;BRANCH IF NOBODY IS SLEWING(BALL IS IN-BOUNDS)
	AND I,1
	STA Z,TEMP7
	CPX Z,TEMP7
	BNE 30$			;BRANCH IF ROBOT IS NOT PLAYER TO GET REBOUND
5$:	LDA AX,SPEED
	STA AX,SPEDS
	LDY I,0
	LDA AX,PUTERH		;FIRST DO HORIZONTAL
	BPL 10$
	LDY I,0FF
10$:	STY Z,TEMP7
15$:	JSR ROT
	DEC AX,SPEDS
	BPL 15$
	CLC
	ADC ZX,CHPPL
	STA ZX,CHPPL
	LDA Z,TEMP7
	ADC ZX,CHPHT
	STA ZX,CHPHT
				;NOW DO VERTICAL
	LDA AX,SPEED
	STA AX,SPEDS
	LDY I,0
	LDA AX,PUTERV
	BPL 20$
	LDY I,0FF
20$:	STY Z,TEMP7
25$:	JSR ROT
	DEC AX,SPEDS
	BPL 25$
	CLC
	ADC ZX,CVPPL
	STA ZX,CVPPL
	LDA Z,TEMP7
	ADC ZX,CVPHT
	STA ZX,CVPHT
	LDA AX,PUTERH
	STA ZX,TBHD
30$:	RTS
ROT:	ASL			;D.P. SHIFT
	ROL Z,TEMP7
	RTS
	.END
                                                                                                                                                                                                                                                                                                                                                         