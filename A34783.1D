	.TITLE BBTEST - SELFTEST
	.SBTTL *********************************
	.SBTTL *
	.SBTTL *  PROGRAMMER: DOWNEND
	.SBTTL *
	.SBTTL *********************************
	.REPT 0

DATE:			7-FEB-79

PROJECT CHARGE NUMBER:	16803

DISK NUMBER:		43 (BACKUP: B42)

ASSEMBLY/LINK COMMAND STRING:

			.R MAC65
			*DX1:BBTEST,DK1:CHRIS.LST=DX1:BBTEST

			.R LINKM
			 - TO BE LINKED WITH BBALL.OBJ,BBCOIN.OBJ

DESCRIPTION:		SELF-TEST ROUTINE FOR BASKETBALL
			PLUS:  DIAGNOSTIC ROUTINE AND ROUTINES SHARED
				WITH MAINLINE (CNTRLS AND SHTBUT)
			.ENDR
			.PAGE
			.SBTTL EXTERNAL REFERENCES
;
;ENTRY POINT:
	.GLOBL STEST
;VARIABLE REFERENCES:
	.GLOBL PWRON,CNTRLS,TRAKBL,TR2,SHTBUT
	.GLOBL NMIDIS,PF,WATCHDOG,PRGMEM
	.GLOBL SOUND2,SOUND1
	.GLOBL TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7
	.GLOBL TEST,MKTEST,PSTAT,GSTAT
	.GLOBL PADDLE,BLACK,WHITE
	.GLOBL MOPIC,MOVPOS,MOHPOS,MOCOLR
	.GLOBL LED1,SOUND1,SOUND2
	.GLOBL CHPHT,CVPHT,DSHT,$COINA
	.GLOBL CNTRLS,TRAKBL,SHTBUT
	.GLOBL MOOLAH
	.GLOBL CHK6,CHK7
;
	.GLOBL STARTB,PN,TBHD,TBVD,CHPPL,CHPHT
	.GLOBL CVPPL,ZSAFE,TBDIR,NEWTB
	.GLOBL $$CRDT,$CNSTT,$CNCT
	.GLOBL NMIEN,INIT,TBCNTR,OTB
;
	.GLOBL SUPERD
	.GLOBL LATCNT
	.GLOBL VBLANK,TESTP,MORAM,INPORT
	.GLOBL STOP1,STOP2,START1,START2,MKTSTP
	.PAGE
	.SBTTL DIAGNOSTIC ROUTINE
	.RADIX 16
	.CSECT
	.REPT 0
*************************
*
*	SUPERD
*
*************************
	DESCRIPTION:	DIAGNOSTIC ROUTINE CALLED
			FROM END OF SELFTEST
	.ENDR
SUPERD:			;DIAGNOSTIC ROUTINE
	LDA I,0
	STA Z,TEMP2
	STA Z,TEMP4
	STA Z,TEMP4+1
	STA Z,TEMP5
	STA Z,TEMP3
	STA A,SOUND1
	LDA I,0FF
	STA A,SOUND2
	STA Z,TEMP2
AGAIN:
	LDY Z,TEMP3
	LDA AY,TESTAB
	STA Z,TEMP1
	LDA AY,TESTAB+1
	STA Z,TEMP1+1
				;SET UP ADDR. FOR INDIRECT JUMP
	JMP N,TEMP1		;JUMP TO CURRENT TEST ROUTINE
RETX:
	LDA A,VBLANK
	LSR
	BCC RETX
10$:	LDA A,VBLANK
	LSR
	BCS 10$
	STA A,WATCHDOG
	LDA A,TEST
	AND I,MKTEST
	BEQ 12$
11$:	BNE 11$			;LOOP WITHOUT HITTING WATCHDOG
12$:	LDA A,TESTP
	ROR
	ROR
	ROR
	ROR
	ROR Z,TEMP2
	LDA Z,TEMP2
	CMP I,80		;SWITCH IS LOW TRUE-LOOK FOR RELEASE
	BNE AGAIN
	INC Z,TEMP3
	INC Z,TEMP3		;GO TO NEXT TEST
	LDA I,0
	STA Z,TEMP6
	LDA Z,TEMP3
	CMP I,14.
	BMI AGAIN
	BPL SUPERD
TESTAB:
	.WORD TEST1
	.WORD TEST2
	.WORD TEST3
	.WORD TEST4
	.WORD TEST5
	.WORD TEST6
	.WORD TEST7
TEST1:				;CLEAR SCREEN
	JSR CLEAR
	JMP RETX
TEST2:				;MOVE MOTION OBJECTS HORIZONTALLY
	LDA Z,TEMP6
	BNE 20$
	LDY I,0FF
	LDA I,240.
	STA Z,TEMP7
	LDX I,03F
10$:	LDA I,0
	STA AX,MORAM		;COLOR
	DEX
	TYA
	SEC
	SBC I,10
	TAY
	STA AX,MORAM		;HPOS
	DEX
	LDA Z,TEMP7
	SEC
	SBC I,15.
	STA Z,TEMP7
	STA AX,MORAM		;VPOS
	DEX
	LDA I,2A
	STA AX,MORAM		;PICTURE
	DEX
	BPL 10$
20$:				;ALREADY INITIALIZED
	LDA I,1
	STA Z,TEMP6
	LDX I,03E
25$:	DEC AX,MORAM
	DEX
	DEX
	DEX
	DEX
	BPL 25$
	JMP RETX
TEST3:				;MOVE VERTICALLY
	LDX I,03D		;ASSUME ALREADY IN POSITION
10$:	DEC AX,MORAM
	DEX
	DEX
	DEX
	DEX
	BPL 10$
	JMP RETX
TEST4:				;COLOR TEST
	LDA Z,TEMP6
	BNE 10$
	JMP TEST2
10$:
	LDX I,3F
11$:	LDA I,55		;BLANK ALL PICS (BACGROUND COLOR)
	STA AX,MORAM
	DEX
	DEX
	DEX
	LDA I,2C		;TEST PATTERN
	STA AX,MORAM
	DEX
	BPL 11$
	LDA I,3F		;ALL WHITE
	STA A,1BCF
	LDA I,0			;ALL BLACK
	STA A,1BD3
	LDA I,2A		;ALL DK. GRAY
	STA A,1BD7
	LDA I,32		;WHITE. BLAK, DK. GRAY
	STA A,1BDB
	LDA I,0E
	STA A,1BDF		;BLACK, WHITE, DK. GRAY
	JMP RETX
TEST5:				;TRACKBALL DIRECTION BITS
	JSR CLEAR
	LDY I,7
	STA A,STOP1
	STA A,STOP2
SNEAK:	LDA A,INPORT
	STA Z,TEMP7
5$:	LSR Z,TEMP7
	BCC 10$
	LDA I,1D
	BPL 20$
10$:	LDA I,1C
20$:	STA AY,190E
	DEY
	BPL 5$
	JMP RETX
TEST6:				;TRACKBALL COUNTER (LEFT)
	LDY I,7
	STA A,STOP1
	STA A,START2
	JMP SNEAK
TEST7:				;TRACKBALL COUNTER (RIGHT)
	LDY I,7
	STA A,START1
	STA A,START2
	JMP SNEAK
CLEAR:
	LDX I,0
	TXA
10$:	STA AX,PF
	STA AX,PF+100
	STA AX,PF+200
	STA AX,PF+300
	DEX
	BNE 10$
	RTS
	.PAGE
	.PAGE
	.SBTTL TEST ROUTINE
	.REPT 0
*************************
*
*	STEST
*
*************************

	DESCRIPTION: RAM/ROM/CONTROLS TEST ROUTINE
	.ENDR
STEST:
	LDX I,0FF
	TXS
	STA A,NMIDIS
				;ZERO-PAGE TEST
				;RAM IS (2) 2114 (256X4)
				;THIS IS MIKE A'S WALKING ONE TEST
	CLD
	LDX I,0FF
	STX A,SOUND2
	INX
	STX A,SOUND1
	TXA			;FIRST CLEAR ALL RAM TO ZERO
1$:	STA ZX,0
	STA AX,PF
	STA AX,PF+100	
	STA AX,PF+200
	STA AX,PF+300
	STA A,WATCHDOG
	INX
	BNE 1$
RAMTST:				;FIRST CHECK ZPAGE RAM
	LDX I,11		;BEGINNING PATTERN
	TXS			;STACK PTR HOLDS PATTERN
	TXA
	STA Z,0			;0 IS FIRST TEST CELL
	LDY I,0
2$:	LDX I,1
3$:	INY
	LDA AY,0
	BNE 6$			;BRANCH IF ANY CELL BESIDES CURRENT
	INX			;TEST CELL HAS TEST PATTERN-ANY NON-ZERO
	BNE 3$			;BIT IN THE CELL Y POINTS TO IS BAD
				;
				;
	TSX			;ALL RAM BESIDES TEST CELL=0, NOW CHECK TEST CELL
	TXA			;ACC=TEST PATTERN
	STA A,WATCHDOG
	INY
	CMP AY,0		;SEE IF CURRENT TEST CELL STILL HAS PATTERN
	BNE 5$			;BRANCH IF ERROR-Y PONTS TO BAD CELL
	LDX I,0
	STX ZY,0		;ZERO THE TEST CELL-ALL RAM=0 AGAIN
	INY			;POINT TO NEXT TEST CELL
	BNE 4$			;BRANCH IF ALL RAM HAS NOT BEEN TESTED WITH
	ASL			;CURRENT TEST PATTERN ELSE SHIFT PATTERN
	BCS PFTST			;BRANCH IF TEST PATTERN HAS SHIFTED INTO CARRY
				;I.E. TEST IS DONE AND RAM IS O.K.
4$:	TAX
	TXS			;SAVE NEW TEST PATTEN
	STX ZY,0		;STORE TEST PATTERN AT NEXT LOCATION
	BNE 2$			;BRA
5$:	EOR AY,0		;ERROR: Y-> BAD CELL
6$:	TAX			;ERROR: Y-> BAD CELL
	LDA I,80
	STA A,SOUND2
	TXA
	AND I,0F
	BEQ 8$
	LDY I,14
7$:	LDA AY,MSG1
	STA AY,186A
	STA AY,196A
	DEY
	BPL 7$
8$:	TXA
	AND I,0F0
	BEQ 10$
	LDY I,15
9$:	LDA AY,MSG2
	STA AY,1883
	STA AY,1983
	DEY
	BPL 9$
10$:	LDA I,55
	STA Z,0			;INFINITE LOOP WRITING "55", "AA" IN LOC. ZERO
	LDA I,0AA
	STA Z,0
	STA A,WATCHDOG
	BMI 10$
MSG1:	.ASCII	/ZPAGEQ@LOW@NIB@BADQE@/
MSG2:	.ASCII	/ZPAGEQ@HIGH@NIB@BADQD@/
;
;
PFTST:				;NEXT,CHECK SCREEN RAM (ZPAGE IS O.K.)
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD PF
	.DSABL M68
	.=.-1
	STA Z,TEMP2+1		;TEMP2=PF ADDR
1$:	LDA I,11		;BEGINNING PATTERN
	STA Z,TEMP1		;TEMP1=TEST PATTERN
	LDY I,0
	STY Z,TEMP7		;TEMP7=CURRENT TEST CELL INDEX
	STY Z,TEMP2
	STA NY,TEMP2		;STORE TEST PATTERN
2$:	TYA			;SCAN TO FF (DON'T WRAP)
	TAX
	INX
	BEQ 4$
3$:	INY
	LDA NY,TEMP2
	BNE 9$			;BRANCH IF ERROR
	INX
	BNE 3$
4$:	LDA Z,TEMP1
	STA A,WATCHDOG
	LDY Z,TEMP7
	CMP NY,TEMP2
	BNE 8$			;BRANCH IF ERROR
	LDA I,0
	STA NY,TEMP2
	LDA Z,TEMP1		;GET TEST PATTERN
	LDY Z,TEMP7		;GET CURRENT CELL #
	INY			;POINT TO NEXT TEST CELL
	BNE 6$			;BRANCH IF ALL RAM IS NOT TESTED
	ASL			;SHIFT TEST PATTERN
	BCS 7$			;BRANCH IF DONE WITH PAGE
6$:	STA Z,TEMP1
	STA NY,TEMP2		;STORE PATTERN IN NEW TEST CELL
	STY Z,TEMP7
	BNE 2$			;BRA
7$:	INC Z,TEMP2+1
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD PF+300
	.DSABL M68
	.=.-1
	CMP Z,TEMP2+1		;CHECK FOR END OF SCREEN RAM (4 PAGES)
	BCC 20$			;SCAN NEXT PAGE
	BCS 1$			;DONE PF RAM OK
8$:	EOR NY,TEMP2		;ERROR!!
9$:	LDX I,0			;ERROR!!
	PHA
	AND I,00F
	BEQ 10$
	LDX I,2			;X (BIT 1)=1 IF LOW NIB BAD
10$:	PLA
	AND I,0F0
	BEQ 11$
	INX			;X (BIT 0)=1 IF HIGH NIB BAD
11$:	TXA
	STA Z,TEMP4
	TYA			;SCREEN RAM ORGANIZED SO THAT EACH 4 TH
				;BYTE COMES FROM SAME RAM
				;1800: F3/F5
				;1801: H3/H5
				;1802: K3/K5
				;1803: L3/L5
	AND I,3
	ASL
	ASL
	ORA Z,TEMP4
				;ACC=INDEX 0000XXZZ
				;XX=RAM ADDR SELECTOR
				;ZZ=HIGH/LOW NIBBLE
	LDX I,3
13$:	STA AX,1930		;OUTPUT LETTER SPECIFING BAD RAM
	DEX
	BPL 13$
				;INDEX	LETTER	BAD LOC.
				;  0	BLANK	IMPOSS.
				;  1	  A	F3
				;  2	  B	F5
				;  3	  C	F3/F5
				;  4	  D	IMPOSS.
				;  5	  E	H3
				;  6	  F	H5
				;  7	  G	H3/H5
				;  8	  H	IMPOSS.
				;  9	  I	K3
				;  A	  J	K5
				;  B	  K	K3/K5
				;  C	  L	IMPOSS.
				;  D	  M	L3
				;  E	  N	L5
				;  F	  O	L3/L5
	LDY I,6
	LDX I,0E0
12$:	LDA AY,MESG3
	STA AX,1810
	STA AX,1811
	STA AX,1812
	STA AX,1813
	TXA
	SEC
	SBC I,20
	TAX
	DEY
	BPL 12$
	LDA I,0A0
	STA A,SOUND2
14$:	STA A,WATCHDOG		;HANG IN LOOP OUTPUTTING SOUND AND
	LDA A,TEST		;TESTING TEST SWITCH
	AND I,MKTEST
	BEQ 15$
	JMP PWRON
15$:	LDA I,55
	STA A,1800
	LDA I,0AA
	STA A,1800
	BMI 14$			;BRA
20$:				;RAM OK: OUTPUT "RAM OK ROM OK"
	LDY I,0C
21$:	LDA AY,MESG1
	STA AY,1889
	DEY
	BPL 21$
ROMTST:				;ROM TEST
	LDX I,0FF
	TXS
	LDY I,0
	STY Z,TEMP2
	TYA
	PHA			;"CORK" STACK WITH "0" (SP=FE NOW)
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD PRGMEM
	.DSABL M68
	.=.-1
	STA Z,TEMP2+1		;TEMP2+1=PRGMEM/100
	LDX I,31.		;32 PAGES OF ROM (8K/256=32)
	TXA			;SEED FOR L.R.C.
	LSR			;GET SOMETHING IN EACH NIBBLE
10$:	LDY I,0
	STX A,WATCHDOG
1$:	EOR NY,TEMP2
	INY
	BNE 1$			;LOOP FOR PAGE 1
	TAY			;SAVE LRC
	TXA
	AND I,3			;2 LSB=PAGE IN ROM (4 PAGES PER 1K ROM)
	CMP I,1			;CLEAR CARRY IF DONE WITH THIS ROM
	TYA			;PUT LRC BACK
	BCS 3$			;SKIP IF IN ROM
;	BEQ 2$			;SKIP IF OK (DELETE TO GET A PUSH FOR EACH ROM/PUSHES 0 IF OK)
	PHA			;ELSE PUSH LRC ONTO STACK
2$:	TXA			;RE-SEED FOR NEW ROM
3$:	INC Z,TEMP2+1		;BUMP PTR
	DEX
	BPL 10$
	LDY I,9			;DEFAULT TO ROM OK
	TSX
	INX			;X POINTS TO LAST STACK ENTRY
7$:	CPX I,0FF
	BEQ 20$
	LDA AX,0		;SCAN STACK FOR NON-ZERO ENTRY
	BNE 6$			;BRANCH IF ERROR (NO-ZERO)
	INX
	JMP 7$
6$:	TXA			;ERROR!!
	TAY
	INX
	TXA
	EOR I,0FF		;CREATE CODE FOR LETTER INDICATING BAD LOC
	ASL
				;CODE=0000XXXZ
	STA Z,TEMP4		;XXX=WHICH 1K SECTION (0-7)
	LDA AY,0		;ZZ=HIGH/LOW NIBBLE
	LDX I,0			;ASSUME ERROR IS IN HIGH NIB
	AND I,0F
	BEQ 11$
	INX			;X(BIT 0)=SET=HIGH NIB ERROR
11$:	TXA
	ORA Z,TEMP4
	CLC
	ADC I,1			;FUDGE FACTOR TO GET CORRECT LETTER
	STA A,1899		;OUTPUT LETTER SPECIFING BAD ROM
				;INDEX	LETTER	BAD LOC.
				; 1	  A	 2000 M
				; 2	  B	 2000 L
				; 3	  C	 2400 M
				; 4	  D	 2400 L
				; 5	  E	 2800 M
				; 6	  F	 2800 L
				; 7	  G	 2C00 M
				; 8 	  H	 2C00 L
				; 9	  I	 3000 M
				; A	  J	 3000 L
				; B	  K	 3400 M
				; C	  L	 3400 L
				; D	  M	 3800 M
				; E	  N	 3800 L
				; F	  O	 3C00 M
				; 10	  P	 3C00 L
	LDY I,6
4$:	LDY I,6
20$:	CPY I,9
	BEQ PATSCN
	LDY I,2
5$:	LDA AY,MESG2
	STA AY,0C-1+1889
	DEY
	BPL 5$
PATSCN:
	LDX I,0
10$:	TXA
	STA AX,1900
	STA A,WATCHDOG
	INX
	BNE 10$
SWTEST:
	LDA I,80
	STA Z,GSTAT
	LDA I,40		;SET GSTAT TO 80 SO TRAKBL WORKS
	STA Z,PSTAT
	STA Z,PSTAT+1		;SET PSTATS TO "PLAYER" SO SHTBUT WORKS
	LDA I,18
	STA Z,TEMP6
	LDX I,0FF
	TXS
	STX Z,TEMP7
	LDA I,PADDLE		;INITIALIZE MOTION OBJECT PARAMETERS
	STA A,MOPIC
	STA A,MOPIC+4
	LDA I,40
	STA Z,CVPHT
	STA Z,CVPHT+1
	STA Z,CHPHT
	LDA I,90
	STA Z,CHPHT+1
	LDA I,BLACK
	STA A,MOCOLR
	LDA I,WHITE
	STA A,MOCOLR+4
LOOP:	JSR CNTRLS		;GET RAW TRACKBALL DATA
	JSR TR2			;CONVERT RAW DATA FOR OUTPUT (TR2 IS A MODIFIED TRAKBL)
				;NEXT, TRANSFER DATA FROM ZPAGE MORAM
	LDY I,4
	LDX I,1
10$:	LDA ZX,CHPHT
	STA AY,MOHPOS
	LDA ZX,CVPHT
	STA AY,MOVPOS
	LDY I,0
	DEX
	BPL 10$
				;NEXT CHECK START SWITCHS
15$:	JSR SHTBUT
	LDA I,0
	STA Z,TEMP5		;TEMP5=EOR OF 5 SWITCHS
	LDY I,2
	LDX I,1
16$:	LDA ZX,DSHT
	BEQ 17$
	STA AY,LED1
	BNE 18$
17$:	STA AY,LED1+1
18$:	AND I,80
	EOR Z,TEMP5
	STA Z,TEMP5
	DEY
	DEY
	DEX
	BPL 16$
	LDA A,$COINA
	AND I,80
	EOR Z,TEMP5
	STA Z,TEMP5
	LDA A,$COINA
	ASL
	AND I,80
	EOR Z,TEMP5
	STA Z,TEMP5
	LDA A,$COINA
	ROR
	ROR
	ROR
	AND I,80
	EOR Z,TEMP5
	BEQ 25$			;BRANCH IF NOT CLOSED
	LDA Z,TEMP6		;ELSE EOR OF SWITCHS SAYS YES SO TURN
	AND I,10		;OFF CROWD, MUSIC ON
	STA Z,TEMP6
	STA A,SOUND1
	DEC Z,TEMP4
	BNE 20$
	LDA I,1F
	STA Z,TEMP4
	INC Z,TEMP7
20$:	LDA Z,TEMP7
	STA A,SOUND2
	JMP 30$			;CHANGE 4C TO 04 FOR TUNNEL SOUND(OR IN 8 INSTEAD OF 4)
25$:				;TURN ON CROWD/MUSIC OFF
	LDA Z,TEMP6
	ORA I,0F
	STA Z,TEMP6
	STA A,SOUND1
	LDA I,0FF
	STA A,SOUND2
30$:				;TURN ON DRIBBLE EACH TIME MOTION OBJECTS
				;PASS HORIZONTALLY
	LDA Z,CHPHT
	LSR
	STA Z,TEMP5
	LDA Z,CHPHT+1
	LSR
	SEC
	SBC Z,TEMP5
	BPL 40$
	EOR I,0FF
	CLC
	ADC I,1
40$:	CMP I,8
	BCS 50$
	LDA Z,TEMP6
	EOR I,10		;TOGGLE BIT TO MAKE DRIBBLE
	STA Z,TEMP6
	STA A,SOUND1
50$:	STA A,WATCHDOG
	LDA A,TESTP
	AND I,MKTSTP
	BNE 55$			;SWITCH IS LOW TRUE
	JMP SUPERD		;GO TO DIAGNOSTIC
55$:	LDA A,TEST
	AND I,MKTEST
	BNE 60$
	JMP LOOP
60$:	JMP 60$			;LOOP WITHOUT HITTING WATCHDOG
;IF WATCHDOG IS O.K., CONTROL WILL XFER TO GAME
ERRTAB:
	.BYTE 0,0
MESG1:
	.ASCII	/RAM@OK@ROM@OK/
MESG2:
	.ASCII	/BAD/
;
MESG3:
	.ASCII	/RAM@BAD/
	.PAGE
	.SBTTL SHOOT BUTTONS
	.REPT 0
**************************
*
*	SHTBUT
*
**************************
	DESCRIPTION:	SCAN SHOOT/JUMP BUTTONS AND TRANSFER CONDITION TO
			DEBOUNCE BYTES
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
	.ENDR
SHTBUT:
	LDA Z,GSTAT
	BMI 5$			;BRANCH IF GAME MODE
	RTS
5$:	LDX I,0
	LDA Z,STARTB
	EOR I,0FF
10$:	LSR
	LDY ZX,PSTAT
	STY Z,TEMP1
	BIT Z,TEMP1
	BVC 15$			;BRANCH IF ROBOT
	ROR ZX,DSHT
12$:	INX
	CPX I,2
	BCC 10$
	RTS
15$:				;LATE START
	LDY A,LATCNT+1
	BEQ 30$			;BRANCH IF TOO LATE FOR LATE STARTS
	DEC A,LATCNT
	BNE 20$
	DEC A,LATCNT+1
20$:	BCC 12$			;BRANCH IF BUTTON NOT PUSHED
	PHA
	LDA I,40
	ORA ZX,PSTAT
	STA ZX,PSTAT
	PLA
30$:	JMP 12$
			;
				;
				;
				;
				;
TR2:				;TRAKBL ROUTINE REWRITTEN FOR STEST
	LDX I,PN
1$:	LDA ZX,TBHD
	LDY I,0
	ASL
	ASL
	ASL
	ASL
	BCC 40$
	DEY
40$:	CLC
	ADC ZX,CHPPL
	STA ZX,CHPPL
	TYA
	ADC ZX,CHPHT
	STA ZX,CHPHT
	LDA ZX,TBVD
	LDY I,0
	ASL
	ASL
	ASL
	ASL
	BCC 70$
	DEY
70$:	CLC
	ADC ZX,CVPPL
	STA ZX,CVPPL
	TYA
	ADC ZX,CVPHT
	STA ZX,CVPHT
100$:	LDA I,0
	STA ZX,TBHD
	STA ZX,TBVD
	DEX
	BMI 105$
	JMP 1$
105$:	RTS
	.PAGE
	.SBTTL POWER-ON
	.REPT 0
*************************
*
*	PWRON
*
*************************
	DESCRIPTION:	POWER-ON RESET ROUTINE
			MUST RESIDE IN TOP 2K
	.ENDR
PWRON:	CLD
	STA A,NMIDIS			;DISABLE NMI
	LDX I,0FF
	TXS
	LDX I,0
	LDA I,0
	STA Z,ZSAFE
	STA ZSAFE+1
	STA Z,$$CRDT		;ZERO EVERYTHING
	STA Z,$CNSTT
	STA Z,$CNSTT+1
	STA Z,$CNCT
	STA Z,$CNCT+1
10$:	STA AX,PF
	STA AX,100+PF
	STA AX,200+PF
	STA AX,300+PF
	STA ZX,0000		;ZERO BASE PAGE
	INX
	BNE 10$
	STA A,START1		;MAKE SURE TRACKBALL COUNTER
	STA A,START2		;PRESETS ARE SET TO "COUNT"
	STA A,NMIEN		;ENABLE NMI
	LDA A,TEST
	AND I,MKTEST
	BNE 20$
	JMP STEST
20$:	JMP INIT
				;
	.PAGE
	.SBTTL RAW TRKBL READINGS
	.REPT 0
*************************
*
*	CNTRLS
*
*************************

	DESCRIPTION: GET RAW DATA FROM TRACKBALL COUNTERS.
			LOGICALLY, THIS BELONGS WITH THE INTERRUPT
			ROUTINE (SINCE THE INTERRUPT ROUTINE CALLS
			IT DURING GAME PLAY), BUT SINCE IT IS ALSO
			SHARED WITH THE SELFTEST ROUTINE, IT HAS BEEN
			PLACED HERE SO IT IS IN THE LAST 2K OF PROGRAM
			SPACE.
	.ENDR
CNTRLS:				;READ TRACKBALL INPUTS
	STA A,START1
	STA A,START2
	LDA A,INPORT
	STA Z,TBCNTR
	STA A,STOP1
	LDA A,INPORT
	STA Z,TBCNTR+1
	STA A,STOP2
	LDA A,INPORT
	STA Z,TBDIR
	STA Z,STARTB
				;NOW RESTART COUNTERS, SAVING STARTING VALUES
	STA A,START2
	LDA A,INPORT
	STA Z,NEWTB+1
	STA A,START1
	LDA A,INPORT
	STA Z,NEWTB
				;CONVERT RAW 4-BIT READINGS TO 8-BIT DISPLACEMENTS
				;(TBHD, TBVD).  THESE DISPLACEMENTS ARE USED BY
				;TRAKBL TO UPDATE MOTION OBJECT POSITION.
				;TRAKBL THEN ZEROS THESE DISPLACEMENTS.
	LDX I,0
10$:	LDA ZX,TBCNTR
	SEC
	SBC ZX,OTB
	AND I,0F
	PHA			;SAVE LOW NIBBLE:HOR. COUNTER
	LDA ZX,TBCNTR
	ORA I,0F
	SEC
	SBC ZX,OTB
	LSR
	LSR
	LSR
	LSR
	LDY ZX,NEWTB
	STY ZX,OTB
20$:	ASL Z,TBDIR		;GET VERTICAL DIRECTION BIT
	ORA I,0
	BEQ 30$
	BCC 30$
	ORA I,0F0		;"SIGN EXTEND"
30$:	STA ZX,TBVD
	ASL Z,TBDIR
	PLA
	ORA I,0
	BEQ 40$
	BCC 40$
	ORA I,0F0
40$:	STA ZX,TBHD
	INX
	CPX I,2
	BCC 10$
	RTS
	.BYTE CHK7
	.END
                                                                                      