	.TITLE BBALL - BASKETBALL
	.SBTTL	**************************************
	.SBTTL	*
	.SBTTL	*	PROGRAMMER:  CHRIS DOWNEND
	.SBTTL	*
	.SBTTL	*	CHECKER:
	.SBTTL	*
	.SBTTL	**************************************
	.REPT 0
DATE INITIATED:		9-OCT-78

PROJECT CHARGE NUMBER:	7S123 OR 16803 (FOR NEW SYSTEM)

DISK NUMBER:		43	(BACKUP: B42)

HARDWARE REQUIREMENTS:	MODIFIED ORBIT (MOC 16)
			WITH, FULL SCREEN MAP, MUSIC CIRCUIT
			WITHOUT INTERLACE

MEMORY REQUIREMENTS:
	PROGRAM:	2000-3FFF (8K BYTES)
	SCREEN RAM:	1800-1BBF (960 BYTES)
	MOTION RAM:	1BC0-1BFF (64 BYTES)
	BASE PAGE RAM:	0000-00FF (256 BYTES)
		*** SCREEN RAM ORIGIN:	UPPER LEFT CORNER
		*** MOTION OBJECT ORIGIN:  LOWER LEFT CORNER

INTERRUPT REQUIREMENTS:	NMI:  EVERY 4MS (CLOCKED BY 32V)

ASSEMBLY/LINK COMMAND STRING:

	.R BATCH
	*DX1:BBALL/X

	....SELECT NORMAL BATCH MODE

	.....BBCOIN.OBJ AND BBTEST.OBJ MUST BE PRESENT
	(LINK STEP WILL PRODUCE AN LDA FORMAT PAPER TAPE)

PROGRAM DESCRIPTION:	COIN-OP VERSION OF STELLA/COLLEEN BASKETBALL BY
			AL MILLER.  ONE/TWO PLAYER BASKETBALL.  PLAYERS
			TRY FOR HIGH SCORE BY CONTROLLING ANTIMATED
			FIGURES ON A BASKETBALL COURT, SHOOTING BASKETS,
			DRIBBLING, ETC.
ASSOCIATED FILES:
	BBCOIN:	COIN DETECTION ROUTINE
	BBTEST:	SELF-TEST ROUTINE
	BBROBT:	ROBOT CONTROL ROUTINE

	..... LINK ABOVE FILES WITH BBALL TO GET A COMPLETE GAME PROGRAM.

	BBEND:	ENDING FLE TO BE LINKED IN WHEN GOING TO ROM
	BBAN:	ALPHA-NUMERICS CHARACTER SET
	BBMF:	MOTION OBJECT CHARACTER SET (REV. F)
	BBCVT:	PDP-11 PROG. TO CONVERT BBAN AND BBMF INTO SUITABLE ROM FORMAT
	BBDST:	DESTINATION TABLE USED BY BBCVT
	CXTOXX:	PDP-11 PROG. USED TO CREATE BBCVT
	.ENDR
	.PAGE
	.SBTTL EXTERNAL REFERENCES
;COIN ROUTINE GLOBALS
;
;ENTRY POINT:
	.GLOBL MOOLAH
;VARIABLE REFERENCES:
	.GLOBL $$CRDT,$CMODE,$CNSTT,$COINA
	.GLOBL $CNCT,$PSTSL,$LAM,$LMTIM
	.GLOBL $INTCT,$LMBIT,$CCTIM
;
;
;
;SELF-TEST GLOBALS
;
;ENTRY POINT:
	.GLOBL STEST
;VARIABLE REFERENCES
	.GLOBL PWRON,TR2,CNTRLS,TRAKBL,SHTBUT
	.GLOBL NMIDIS,PF,PRGMEM,WATCHDOG
	.GLOBL SOUND2,SOUND1
	.GLOBL TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7
	.GLOBL TEST,MKTEST,PSTAT,GSTAT
	.GLOBL PADDLE,BLACK,WHITE
	.GLOBL MOPIC,MOVPOS,MOHPOS,MOCOLR
	.GLOBL LED1,SOUND1,SOUND2
	.GLOBL CHPHT,CVPHT,DSHT,ROBDEL
	.GLOBL CHK0,CHK1,CHK2,CHK3
	.GLOBL CHK4,CHK5,CHK6,CHK7
;
	.GLOBL LATCNT
	.GLOBL VBLANK,TESTP,MORAM,INPORT
	.GLOBL STOP1,STOP2,START1,START2,MKTSTP
	.GLOBL STARTB,PN,TBHD,TBVD,CHPPL,CHPHT
	.GLOBL CVPPL,ZSAFE,TBDIR,NEWTB
	.GLOBL $$CRDT,$CNSTT,$CNCT
	.GLOBL NMIEN,INIT,TBCNTR,OTB
;
;
;BBEND GLOBALS (THE ENDING FILE FOR BASKETBALL - ASSIGNS VECTORS)
;
;VARIABLE REFERENCES:
	.GLOBL BALINT,PWRON
;
;
;
;ROBOT GLOBALS
;
;ENTRY POINT:
	.GLOBL ROBOTS
;VARIABLE REFS:
	.GLOBL BNDCHK,RANDU,BADIVD,SCORE
	.GLOBL PN,PSTAT,GSTAT,BALCOD
	.GLOBL FREFLG,COLFLG,LEADER,COLFGH
	.GLOBL MVCOMP,PUTERD,PUTERV,PUTERH,SCOUNT,SMARTS
	.GLOBL CHPPH,CVPPH,CVPPL,CHPPL,CHPHT,CVPHT,CPICP
	.GLOBL RLHPBL,VFLRBL,DSHT
	.GLOBL TEMP1,TEMP2,TEMP3,TEMP4,TEMP5,TEMP6,TEMP7
	.GLOBL BALREP,ROBJMP,SLEWFG
	.GLOBL PCOLFG,TBHD,SPEED,SPEDS
;
;
	.PAGE
	.SBTTL BASE PAGE ALLOCATION AND EQUATES
	.ASECT
	.RADIX 16
	.=0000
	.SBTTL	SYMBOL EQUATES
	;
$LMBIT	=2
BAKVAL	=1F			;DURATION OF ROBOTS BACKUP UPON STEAL.
BLACK	=0
FRAC	=80
GRAVH	=0FF			;GRAVITY COEFFICIENT
GRAVL	=0D0
GSAVAL	=0			;GAME STATUS: ATTRACT
GSCVAL	=40			;GAME STATUS: CREDIT
GSGVAL	=80			;GAME STATUS: GAME
PADDLE	=2A
PF	=1800
PN	=1			;PN=# OF PLAYERS ALLOWED(EITHER 1 OR 3, I.E. 2 OR 4)
PRGMEM	=2000
VBASOF	=7F
MKDLLR	=18
MKTIME	=07
MKTEST	=10
MKTSTP	=8
MKFLSH	=8
MKTMIN	=20
NEGLIM	=-6
NGLIMD	=-3
PSLIMD	=3
POSLIM	=6
WHITE	=33
CHK0	=0F7			;2000 CHECKSUM
CHK1	=053			;2400
CHK2	=0AF			;2800
CHK3	=016			;2C00
CHK4	=0C7			;3000
CHK5	=084			;3400
CHK6	=080			;3800
CHK7	=077			;3C00
	.SBTTL	I/O EQUATES
				;*** INPUT ADDRESSES
INPORT	=0800			;TRACKBALL INPUTS ARE AT 800.  WHAT
				;COMES OUT AT THIS ADDRESS IS DETERMINED
				;BY "START AND STOP" DESCRIBED BELOW UNDER OUTPUT
				;ADDRESSES
				;SEE ALSO TBDIR IN BASE PAGE ALLOCATION
$COINA	=0802			;D7=COIN2=LEFT, D6=COIN1=RIGHT, D5=COIN0
TEST	=0802			;D4=TEST SWITCH
TESTP	=0802			;D3=TEST STEP SWITCH
SPARES	=0802			;D2
$LAM	=0802			;D1=SLAM
VBLANK	=0802			;D0=VBLANK SYNC SIGNAL
OPTSW	=0803			;OPTION SWITCH INPUT
;ALL "ON" = 1:00/COIN,BOTH MECHS THE SAME, NO 2 COIN MIN. IN ENGLISH
;
;SW3	SW2	SW1	TIME/CREDIT
;OFF	OFF	OFF	FREE PLAY
;OFF	OFF	ON	2:30/CREDIT
;OFF	ON	OFF	2:00/CREDIT
;OFF	ON	ON	1:30
;ON	OFF	OFF	1:15
;ON	OFF	ON	0:45
;ON	ON	OFF	0:30
;ON	ON	ON	1:00/CREDIT
;
;SW4	SW5	SPECIAL COIN MODE
;OFF	OFF	COIN MECH 2=1 COIN/6 CREDITS
;OFF	ON	1 COIN/5 CREDITS
;ON	OFF	1 COIN/4 CREDITS
;ON	ON	1 COIN/1 CREDIT
;
;SW6
;ON=NORMAL
;OFF=2 COIN MINIMUM
;
;SW7	SW8	LANGUAGE
;OFF	OFF	GERMAN
;OFF	ON	SPANISH
;ON	OFF	FRENCH
;ON	ON	ENGLISH
;
				;
				;*** OUTPUT ADDRESSES
WATCHDOG=1000			;WATCHDOG COUNTER RESET ADDRESS
SOUND1	=1010			;CROWD/DRIBBLE (0=OFF)
SOUND2	=1030			;MUSIC (FF=OFF)
CCOFF	=1022			;COIN COUNTER OFF ADDR.
CCON	=1023			;COIN COUNTER ON ADDR
LED1	=1024			;LED "OFF"ADDR.; +1 FOR "ON"
LED2	=1026
STOP1	=1028			;STOPS FIRST TRACKBALL COUNTER (LD1=0)
START1	=1029			;STARTS .....
STOP2	=102A			;STOPS SECOND TRACKBALL COUNTER (LD2=0)
START2	=102B			;STARTS .....
				;LD1=LD2=1=GET H,V FOR P1 FROM 0800
				;LD1=0, LD2=1=GET H,V FOR P2 FROM 800
				;LD1=LD2=0=GET DIRECTION AND PLAYER BUTTONS FROM 800
NOISRES	=102C
NMIDIS	=102E			;ANY WRITE DISABLES NMI
NMIEN	=102F			;ANY WRITE ENABLES NMI
				;
				;*** MOTION RAM EQUATES
;
;MOTION RAM ORGANIZATION:
;16 BLOCKS OF 4 BYTES (1BC0+3F=1BFF)
;EACH BLOCK CONSISTS OF:
;	1BXX+0 = PICTURE
;	1BXX+1 = VERTICAL POSITION
;	1BXX+2 = HORIZONTAL POSITION
;	1BXX+3 = COLOR DESCRIPTOR
;
;XX = C0,C4,C8,CC,D0,D4...F8,FC
MORAMH	=1B
MORAML	=0C0
MORAM	=1BC0
MOPIC	=1BC0
MOVPOS	=1BC1
MOHPOS	=1BC2
MOCOLR	=1BC3
	.PAGE
	.SBTTL	BASE PAGE ALLOCATION
	.SBTTL		MOTION OBJECT TEMPORARIES
;
;EACH PLAYER COMPOSITE IS MADE UP OF THREE 8X32 MOTION OBJECTS SANDWICHED
;TOGETHER.  THESE ARE REFERRED TO AS LEFT, RIGHT, CENTER.  EACH MOTION OBJECT
;HAS 5 ATTRIBUTES:
;	1) PICTURE
;	2) VERTICAL POSITION
;	3) HORIZONTAL POSITION
;	4) COLOR DESCRIPTOR
;	5) MOTION RAM LOCATION
;THEREFORE, EACH OF THE 4 PLAYERS MUST HAVE BASE PAGE SPACE FOR ITS LEFT, RIGHT
;AND CENTER MOTION PIECES.
; THE 4 "PLAYERS" ARE ALLOCATED AS FOLLOWS:
;	1) LEFTSIDE PLAYER
;	2) RIGHTSIDE PLAYER
;	3) LEFTSIDE BACKBOARD
;	4) RIGHTSIDE BACKBOARD
;
;ALL MOVEMENT CALCULATIONS ARE W.R.T.  THE CENTER MOTION PIECE.  "KEEPUP" UPDATES
;THE LEFT AND RIGHT SIDES.  "PLAYER" MAINTAINS CORRECT REFLECTION.
;
				;CENTER MOTION PIECE ATTRIBUTES
;
CDP:	.BLKB 4			;DESCRIPTOR
CPICP:	.BLKB 4			;PICTURE,PLAYER
CVPPL:	.BLKB 4			;VPOS,LO
CVPPH:	.BLKB 5			;VPOS,HI
CHPPL:	.BLKB 4			;HPOS,LO
CHPPH:	.BLKB 4			;HPOS,HI
CPTRPL:	.BLKB 5			;POINTER,LO
CVPHT:	.BLKB 4			;INTERMEDIATE TEMPS-SEE "XFER"
CHPHT:	.BLKB 4			;INTERMEDIATE TEMPS-SEE "XFER"
				;
				;LEFT MOTION PIECE ATTRIBUTES
				;
LDP:	.BLKB 4			;DESCRIPTOR
LPICP:	.BLKB 4			;PICTURE,PLAYER
LVPPH:	.BLKB 4			;VPOS,HI
LHPPH:	.BLKB 4			;HPOS,HI
LPTRPL:	.BLKB 5			;POINTER,LO
				;
				;RIGHT MOTION PIECE ATTRIBUTES
				;
RDP:	.BLKB 4			;DESCRIPTOR
RPICP:	.BLKB 4			;PICTURE,PLAYER
RVPPH:	.BLKB 4			;VPOS,HI
RHPPH:	.BLKB 4			;HPOS,HI
RPTRPL:	.BLKB 5			;POINTER,LO
				;
				;BALL POSITION TEMPORARIES
				;
BALD:	.BLKB 1
BALDES:	.BLKB 1			;BALL DESTINATION DURING SLEW
BALOFF:	.BLKB 1		;BALL OFFSET AT END OF SLEW
BPIC:	.BLKB 1
BPTRL	=CPTRPL+4		;THIS IS DONE SO PTR'S ARE CONTIGUOUS
LBPTR	=LPTRPL+4
RBPTR	=RPTRPL+4
BNCHGT:	.BLKB 1			;BOUNCE HEIGHT
BNCHTL:	.BLKB 1
BNCHI:	.BLKB 1			;3RD OR HIGHEST BYTE OF BOUNCE
CURMAG:	.BLKB 1			;CURRENT MAGNITUDE OF BALL BOUNCE VELOCITY
CURMGL:	.BLKB 1			;LOW BYTE OF ABOVE
DRBTMR:	.BLKB 1			;DRIBBLE TIMER
HVELBL:	.BLKB 2			;HORIZONTAL VELOCITY OF BALL (FRAMES/INC)
HVELCT:	.BLKB 2			;HORIZONTAL VELOCITY OF BALL COUNTER
HBLINC:	.BLKB 1			;HORIZONTAL INCREMENT (+1 OR -1)
INTVEL:	.BLKB 1			;INITIAL UPWARD VELOCITY OF BALL AT LAST BOUNCE
INTVLL:	.BLKB 1			;LOW BYTE OF ABOVE
OLDBNC:	.BLKB 1			;PREVIOUS BNCHGT
RLHPBL:	.BLKB 1			;REAL HORIZONTAL POSITION OF BALL (OVERHEAD VIEW POSITION)
VFLRBL	=CVPPH+4		;VERTICAL FLOOR POSITION OF BALL
VPOSBL:	.BLKB 1			;VERTICAL POSITION OF BALL
VVELBL:	.BLKB 2			;VERTICAL VELOCITY OF BALL (FRAMES/INC)
VVELCT:	.BLKB 2			;VERTICAL VELOCITY OF BALL COUNTER
VBLINC:	.BLKB 1			;VERTICAL INCREMENT (+1 OR -1)
				;
	.SBTTL		MISC. ALLOCATION
				;
$$CRDT:	.BLKB 1
$CNSTT:	.BLKB 2
$CNCT:	.BLKB 2
$CMODE:	.BLKB 1
$PSTSL:	.BLKB 2
$LMTIM:	.BLKB 1
$INTCT:.BLKB 1
$CCTIM:	.BLKB 1
ANTHGT:	.BLKB 2			;ANTIMATION HGT OR PIC
ANTMR:	.BLKB 2			;ANTIMATION TIMER
ARCS:	.BLKB 1			;COUNT ATTRACT ARM ARCS
BALCOD:	.BLKB 1			;D7=1=BALL IS CONTROLLED
				;D6=1=SHOOTING POSITION
				;D0=PLAYER #
BNCNT:	.BLKB 1			;COUNT BOUNCES
CAPLOK:	.BLKB 1			;CAPTURE LOCKOUT: 0=O.K. TO CAPTURE BALL
CNTDWN:	.BLKB 1			;COUNTDOWN TIMER
COLFLG:	.BLKB 2			;ROBOT COLLISION FLAG
CSNDFG:	.BLKB 1			;CROWD SOUND FLAG
DSHT:	.BLKB 2			;DEBOUNCED SHOOT/JUMP
DRBTIM:	.BLKB 1			;TIME OUT LENGTH OF DRIBBLE-BEFORE TOSS IN ATTRACT
DRIBLR:	.BLKB 1			;NUMBER (0-1) OF DRIBBLER
DSNDFG:	.BLKB 1			;DRIBBLE SOUND FLAG
FRAME:	.BLKB 1			;FRAME COUNTER
FREFLG:	.BLKB 1			;FREEZE FLAG: 1=FREEZE MODE
FRZIT:	.BLKB 1			;FREEZE ANTIMATION DURING ATTRACT AFTER SHOT
GSTAT:	.BLKB 1			;GAME STATUS: 80=GAME, 40=CREDIT, 0=ATTR
GTIME:	.BLKB 3			;GAME TIMERS
HPLCNT:	.BLKB 2			;SLEW MOVE CNTRS
HPLSAV:	.BLKB 2
ITEMP:	.BLKB 1			;INTERRUPT TEMPORARY
JMPHGT:	.BLKB 4			;CURRENT JUMP HEIGHT
LEADER:	.BLKB 1			;WHOS LEADING
LENGTH:	.BLKB 1			;LENGTH OF MUSIC NOTE
LATCNT:	.BLKB 2			;TIME DURATION OF LATE STARTS
LCKOUT:	.BLKB 1			;LOCKOUT SAFETY COUNTER
MSNDFG:	.BLKB 1			;MUSIC SOUND FLAG
NOBAS:	.BLKB 1			;NO BASKETS ALLOWED TIMER
NOTBLK:	.BLKB 1			;0=BLOCK O.K.
ONCE:	.BLKB 1			;ONE TIME THRU ATRPOS FLAG
OVRDFG:	.BLKB 2			;OVERRIDE FLAG: D7=1=JAM IN VERT. TBALL READING;D6=1=HOR.
POLY:	.BLKB 1			;RANDOM # GENERATOR SEED
POSCNT:	.BLKB 1			;DELAY COUNTER BETWEEN BASKET AND REPOSITIONING
PSTAT:	.BLKB 4			;PLAYER STATUS
				;D7:
				;	0=VISIBLE
				;	1=INVISIBLE
				;D6:
				;	0=ROBOT
				;	1=PLAYER
				;D5 TO D2 NOT USED
				;D1:
				;	0=NOT MOVING
				;	1=MOVING
				;D0:
				;	0=FACING LEFT
				;	1=FACING RIGHT
SAVEX:	.BLKB 1			;SAVE WHO SCORED FOR REPOS
SCORE:	.BLKB 4			;SCORE,SCORE+2=LEFT SIDE
SHOOTR:	.BLKB 1			;NUMBER (0-1) OF PLAYER WHO SHOT LAST
SHTPOS:	.BLKB 1			;CURRENT ATRACT SHOOT POS.
SLEWFG:	.BLKB 1			;SLEW FLAG - D7=1 IF SLEW
TEMP1:	.BLKB 2
TEMP2:	.BLKB 2
TEMP3:	.BLKB 1
TEMP4:	.BLKB 1
TEMP5:	.BLKB 1
TEMP6:	.BLKB 1
TEMP7:	.BLKB 1	
TWO:	.BLKB 1			;COIN CNTR. FOR 2 COIN MIN.
VPLCNT:	.BLKB 2			;SLEW MOVE RATE CNTRS
VPLSAV:	.BLKB 2			;	"	"
WHTEFG:	.BLKB 1			;WHITE CHARACTER FLAG
WSNDFG:	.BLKB 1			;30-SEC. WARNING SOUND FLAG
;
;TRACKBALL BASE PAGE ALLOCATION
;
TBCNTR:	.BLKB 2
TBDIR:	.BLKB 1			;DIRECTION BYTE:
				;D7=VER P1
				;D6=HOR P1
				;D5=VER P2
				;D4=HOR P2
				;D3=SPARE
				;D2=SPARE
				;D1=START2 (LOW TRUE)
				;D0=START1 (LOW TRUE)
STARTB:	.BLKB 1			;BUTTON BYTE:
NEWTB:	.BLKB 2			;NEW TRACKBALL COUNTER
OTB:	.BLKB 2			;OLD TRACKBALL COUNTER
TBHD:	.BLKB 2			;NET HOR. DISPLACEMENT
TBVD:	.BLKB 2			;NET VERTICAL DISPLACEMENT
ZSAFE:	.BLKB 2			;PROTECTION BYTES: SEE INTERRUPT ROUTINE
	.=1B9C			;SCREEN RAM AVAILABLE AS PROGRAM RAM
TIME:	.BLKB 2			;ATTRACT RESET TIMER
FRETIM:	.BLKB 2			;FREEZE TIMER
BALREP:	.BLKB 1			;BALL REPOSTIOTN TIMER (OUT-OF-BOUNDS)
PUTERV:	.BLKB 2			;COMPUTER MOVE VALUE
PUTERH:	.BLKB 2			;COMPUTER MOVE VALUE
MVCOMP:	.BLKB 2			;COMPUTER MOVE FLAG 0=MOVE I.P.
PUTERD:	.BLKB 2			;COMPUTER DELAY BEFORE NEW RANDOM MOVE
SCOUNT:	.BLKB 2			;SMARTS COUNTER - NOW OFTEN TO LOOK AT BALL
PCOLFG:	.BLKB 2			;PLAYER COLLISION FLAG
SPEED:	.BLKB 2			;SPEED OF ROBOT
SPEDS:	.BLKB 2			;SPEED COUNTER (ROBOT)
SMARTS:	.BLKB 2			;COMPUTER SMARTS - BASED ON SCORE
COLFGH:	.BLKB 2			;HOR. BOUND COLLISION FLAG
ROBDEL:	.BLKB 2			;ROBOT MOVE DELAY AFTER BASKET
ROBJMP:	.BLKB 2			;FLAG TO ROBOT ROUTINE - JMP OK
ROBSTL:	.BLKB 2			;FLAG TO ROBOT ROUTINE INDICATING POSSESSION.
	.PAGE
	.SBTTL MAIN LOOP
	.=PRGMEM
	.REPT 0
*************************************
*
*	M A I N  L O O P
*
*************************************

BASIC FLOW OF CONTROL

INIT-	INITIALIZE PARAMETERS
	FALL THRU
MAIN-	WAIT FOR VBLANK
	GAME MODE?	YES: GO TO GAME
	CREDIT MODE?	YES: GO TO BEGIN
	FALL THRU
ATRACT-	OUTPUT ATTRACT MESSAGES
	FALL THRU
GAME-	HANDLE GAME PLAY
	FALL THRU
FREEZE-	HANDLE END OF GAME FREEZE
	GAME OVER?	YES: GO TO INIT
			NO:  GO TO MAIN
BEGIN-	SCAN START BUTTONS, START GAME
	HANG TILL READY
	GO TO MAIN
	.ENDR
	.BYTE CHK0
INIT:
	JSR CLRSND
	LDA I,0
	STA Z,FREFLG
	STA Z,CNTDWN
	STA Z,NOTBLK
	STA Z,CAPLOK
	STA Z,NOBAS
	STA A,NOISRES+1
	STA A,NOISRES
	STA Z,ONCE
	JSR RESET
	JSR BASKET
	JSR TEAMS
	JSR PRTY
	JSR PFOUT
	JSR TIMOUT
	LDA I,59
	STA Z,GTIME
MAIN:
	LDA A,VBLANK
	LSR
	BCC MAIN
	JSR UPDATE
20$:	LDA A,VBLANK
	LSR
	BCS 20$
	STA A,WATCHDOG
	DEC Z,FRAME
	LDA A,TEST
	AND I,MKTEST
	BNE 30$
	JMP STEST		;SELF TEST
30$:				;DETERMINE GAME STATUS
	BIT Z,GSTAT
	BMI GAME
	BVC 40$
	JMP BEGIN
40$:	LDA Z,GTIME+1
	ORA Z,GTIME+2
	BEQ ATRACT
	LDA I,GSCVAL		;ENTER CREDIT MODE IF CREDIT IS ACCRUED
	STA Z,GSTAT
ATRACT:				;FLASH GAME OVER ETC. AND FALL THRU TO GAME
	LDA A,OPTSW
	AND I,MKTMIN
	BEQ 5$
	JSR TWOUT2
5$:	JSR ATRPOS		;POSITION/MOVE PLAYERS DURING ATTRACT
				;TIME OUT RESET OF SCREEN DURING ATTRACT
	LDA A,TIME		;TIME=FRACTIONS OF A SECOND
	BNE 10$
	LDA I,60.
	STA A,TIME
10$:	DEC A,TIME
	BNE 15$
	LDA A,TIME+1		;TIME+1=SECONDS
	BNE 13$
	LDA I,180.
	STA A,TIME+1
13$:	DEC A,TIME+1
	BNE 15$
	JMP INIT		;DO RE-INITIALIZATION RESET AFTER 2 MINUTES
15$:
	LDA Z,FRAME
	AND I,MKFLSH		;FLASH GAME OVER
	BNE 20$
	JSR OVROUT
	JMP GAME
20$:	JSR BKOVR
GAME:				;HANDLE EVERYTHING TO DO WITH GAME PLAY
				;
	LDA I,0
	STA Z,LCKOUT		;CLEAR LOCKOUT SFAFETY COUNTER
	JSR CONVERT		;EXCHANGE CREDITS FOR TIME
	JSR SHTBUT		;SCAN SHOOT BUTTONS
	JSR FLSHBT		;FLASH START LAMPS
	JSR ROBOTS		;DO COMPUTER CONTROL
	JSR BALL		;MOVE BALL
	JSR SOUND		;OUTPUT SOUNDS
	JSR PLAYER		;DO PLAYER ANTIMATION
	JSR BNDCHK		;CHECK FOR IN-BOUNDS
	JSR REPOS		;REPOSITION PLAYERS AFTER BASKET
	JSR SLEW		;SLEW PLAYER AT OUT-OF-BOUNDS
	JSR XFER		;TRANSFER TRACKBALL READINGS
	JSR PPCOL		;LOOK FOR PLAYER-PLAYER COLLISIONS
	JSR KEEPUP		;ALIGN ALL 3 OBJECTS OF A PLAYER
	JSR PRTY		;ASSIGN PRIORITIES TO MOTION OBJECTS
	JSR SCROUT		;OUTPUT SCORES
	JSR CLOCK		;COUNT-DOWN THE GAME TIMER
	BEQ FREEZE
	JMP MAIN
FREEZE:				;END-OF-GAME FREEZE
	LDA Z,GSTAT
	BNE 20$
	JMP INIT		;SKIP FREEZE IN ATTRACT
20$:	DEC A,FRETIM
	BNE 40$
	LDA I,90
	STA A,FRETIM
	DEC A,FRETIM+1
	BNE 40$
	LDA Z,GTIME+1
	ORA Z,GTIME+2
	BEQ 30$			;BRANCH IF NO CREDIT
	LDA I,GSCVAL
	BPL 31$			;BRA
30$:	LDA I,GSAVAL
31$:	STA Z,GSTAT
	JMP INIT
40$:	LDA I,1
	STA Z,FREFLG		;SET FREEZE-FLAG SO PLAYERS
				;STOP MOVING, SHOT BALL STILL MOVES
				;IT IS CLEARED IN INIT. IT IS SET HERE IN
				;FREEZE
	LDA Z,GTIME+1
	ORA Z,GTIME+2
	BEQ 45$
	LDA I,1
	STA A,FRETIM
	STA A,FRETIM+1		;LEAVE FREEZE IMMEDIATELY IF THERE IS TIME ACCRUED
45$:	LDX I,PN
50$:	STA ZX,PSTAT
	DEX
	BPL 50$
	LDA Z,FRAME
	AND I,8
	BNE 55$
	JSR OVROUT
	JMP MAIN
55$:	JSR BKOVR
	JMP MAIN
				;
				;
				;
BEGIN:				;CREDIT IS ACCRUED, SO SCAN START BUTTONS
	LDA I,80
	LDX I,PN
10$:	STA ZX,PSTAT		;MAKE ALL INVISIBLE
	DEX
	BPL 10$
	JSR RESET		;POSITION BALL AND ALL PLAYERS OFF SCREEN
	JSR BASKET
	JSR TEAMS
	JSR CLRSND
	JSR ADDOUT
BEGIN2:
	JSR SCROUT
	JSR CONVERT
	JSR FLSHBT
	JSR SOUND
	LDA Z,FRAME
	AND I,10
	BNE 20$
	JSR BKSTRT
	JMP 50$
20$:	LDA A,OPTSW
	AND I,MKTMIN
	BEQ 30$			;BRANCH IF NOT 2 COIN MIN
	LDA Z,TWO		;TWO=2=2 COINS ACCEPTED
	CMP I,2
	BCS 30$
	JSR TWOUT
	JMP 50$
30$:	JSR STRTOUT		;OUTPUT PRESS START
50$:	JSR STRTBT		;SCAN START BUTTONS/TIME COUNT-DOWN
				;RETURN ACC=0 WHEN COUNT-DOWN DONE
	JSR POSIT		;POSITION STARTED PLAYERS ON SCREEN
	BEQ 90$
80$:				;TIME TO ENTER GAME MODE
				;SO INITIALIZE A BUNCH OF STUFF AND.....
	JSR XFER
	JSR UPDATE
	JSR PFOUT		;THIS CLEARS SCREEN RAM USED AS PROG. RAM...
	LDA I,0
	LDY I,VBLINC		;CLEAR BALL PARAMETERS
81$:	STA AY,0000
	DEY
	CPY I,BNCHGT
	BNE 81$
	STA Z,BALCOD
	STA Z,VVELCT
	STA Z,VVELBL
	STA Z,VBLINC
	STA Z,CAPLOK
	STA Z,SLEWFG
	LDX I,3
82$:	STA ZX,SCORE
	DEX
	BPL 82$
	STX A,FRETIM
	LDA I,6
	STA A,FRETIM+1
	LDA I,0
	STA Z,POSCNT
	STA Z,DSNDFG
	STA Z,TWO
	LDA I,87
	STA Z,MSNDFG
	STA A,MVCOMP
	STA A,MVCOMP+1
	LDA I,2
	STA Z,LENGTH
	LDA I,0F
	STA Z,CSNDFG
	LDA I,7F
	STA Z,VFLRBL
	STA Z,RLHPBL
	STA A,LATCNT
	LDA I,3
	STA A,LATCNT+1
	LDA I,60
	STA Z,BNCHGT
	LDA I,4
	STA Z,INTVEL
	LDA I,GSGVAL		;..... ENTER GAME MODE
	STA Z,GSTAT
	JSR SCROUT
	JSR TIMOUT
	JMP MAIN
90$:				;STILL WAITING TO ENTER GAME MODE
	LDA A,VBLANK
	LSR
	BCC 90$
	STA A,WATCHDOG
	DEC Z,FRAME
	JSR PRTY
	JSR XFER
	JSR UPDATE
95$:	LDA A,VBLANK
	LSR
	BCS 95$
	JMP BEGIN2
	.PAGE
	.SBTTL START BUTTONS
	.REPT 0
******************************
*
*	START BUTTONS
*
******************************
	DESCRIPTION:	HANDLE STARTING A GAME USING START BUTTONS AS OPPOSED
			TO GAME SELECT BUTTONS.
			- RUN COUNTDOWN TIMER
			- UPDATE PLAYER STATUS AND OUTPUT TO SCREEN AS PLAYERS
			  START-UP
			- CHANGE PLAYER STATUS AS NECESSARY WHEN GAME STARTS
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ACC=80 IF ITS TIME TO ENTER GAME MODE
			ACC=0  IF ITS NOT TIME
			X,Y BLITZED
	.ENDR
STRTBT:
	LDA A,OPTSW
	AND I,MKTMIN
	BEQ 1$			;BRANCH IF NOT 2 COIN MIN.
	LDA Z,TWO
	CMP I,2
	BCC 70$			;BRANCH IF COINS INSUFFICIENT
1$:	LDA I,0
	LDX I,PN
10$:	ORA ZX,PSTAT
	DEX
	BPL 10$
	AND I,40
	BNE 15$
	JMP 50$
15$:	LDA Z,CNTDWN
	BNE 20$
	LDA I,5
	STA Z,CNTDWN
	LDA I,60.
	STA Z,FRAME
20$:	LDA Z,FRAME
	BNE 50$
	LDA I,60.
	STA Z,FRAME
	DEC Z,CNTDWN
	BNE 50$
	LDX I,PN
40$:	LDA ZX,PSTAT
	BPL 45$
	LDA I,0			;CODE FOR VISIBLE ROBOT
	STA ZX,PSTAT
45$:	DEX
	BPL 40$
				;
49$:	LDA I,80		;80=START GAME FLAG
	RTS
				;
50$:				;READ START BUTTONS
	LDY I,0
	LDX I,0
	LDA A,STARTB
	STA Z,TEMP5
55$:	LDA ZX,PSTAT
	ASL
	BMI 60$
	LSR Z,TEMP5		;GET SWITCH CONDITION, LOW TRUE
	BCS 65$
	LDA I,40		;CODE FOR A VISIBLE PLAYER
	STA ZX,PSTAT
	BPL 65$
60$:	LSR Z,TEMP5
	INY
65$:
	INX
	CPX I,2
	BCC 55$
	CPY I,2
	BEQ 49$
70$:	LDA I,0
	RTS
	.PAGE
	.SBTTL UTILITIES
	.SBTTL	ATTRACT POSITIONS
	.REPT 0
***************************
*
*	ATRPOS
*
***************************
	DESCRIPTION:	POSITION PLAYERS DURING ATTRACT MODE
	REGISTERS:
		IN:	DON'T CARE
		OUT:	BLITZED
	.ENDR
ATRPOS:
	LDA Z,ONCE
	BNE 40$
	LDX I,PN
10$:	LDA ZX,CHPPH
	BNE 20$
	TXA
	STA ZX,PSTAT		;0,1=L/R FACING VISIBLE ROBOT
	DEX
	BPL 10$
	JSR POSIT
	LDA Z,CHPHT
	SEC
	SBC I,54
	STA Z,CHPHT
	LDA Z,CHPHT+1
	CLC
	ADC I,10
	STA Z,CHPHT+1
	LDA I,64
	STA Z,RLHPBL
	LDA I,7F
	STA Z,VFLRBL
	LDA I,0
	STA Z,BNCHGT
20$:
	DEX
	BPL 10$
	LDA I,7
	STA Z,SHTPOS
	LDA I,26
	STA Z,ARCS
	LDA I,1
	STA Z,SAVEX
40$:					;SHOOOT BALL BACK AND FORTH
	LDA I,1
	STA Z,ONCE
	LDX I,PN
	LDA Z,FRZIT
	BEQ 44$
	JMP NEXT
44$:	LDA ZX,CHPPH
	LDY Z,SHTPOS
	CMP AY,SHTHPS
	BEQ 45$			;BRANCH IF IN POSITION TO SHOOT
	DEC ZX,CHPHT
	JMP CLEAN
45$:
	LDA Z,BALCOD
	BPL CLEAN		;BRANCH IF BALL IS FREE
	AND I,1
	STA Z,TEMP1
	CPX Z,TEMP1
	BNE CLEAN		;BRANCH IF OPPONENT HAS BALL
	LDA ZX,JMPHGT
	BNE CLEAN		;DONT SHOOT TILL JUMP IS DONE
	SEC
	ROR ZX,DSHT
	LDA ZX,CPICP
	AND I,3F
	LSR
	LDY Z,SHTPOS
	CMP AY,STAB		;COMPARE CURRENT ARM WITH DESIRED ARM
	BNE 60$
	DEC Z,ARCS
	BNE 60$
	LDA I,26
	STA Z,ARCS
	DEC Z,SHTPOS
50$:	LDA I,1
	STA ZX,DSHT
	LDA I,3F
	STA Z,DRBTIM
	LDA I,2F
	STA Z,FRZIT
	JMP NEXT
60$:	RTS
CLEAN:
	CLC
	ROR ZX,DSHT
	LDA A,FRETIM
	BEQ NEXT
	DEC A,FRETIM
	BNE NEXT
	LDA I,0FE
	STA ZX,DSHT		;FORCE A JUMP
NEXT:
	DEX
	LDA Z,BALCOD
	BPL 50$
	AND I,1
	STA Z,TEMP1
	CPX Z,TEMP1
	BNE 50$
	LDA Z,DRBTIM
	BEQ 10$
	DEC Z,DRBTIM
	BNE 50$			;BRANCH IF NOT READY TO SHOOT
10$:	SEC
	ROR ZX,DSHT
	LDA ZX,CPICP
	AND I,3F
	LSR
	LDY Z,SHTPOS
	CMP AY,STAB
	BNE 100$
	LDA I,1
	STA ZX,DSHT
	LDA AY,JMPWT
	STA A,FRETIM
	JMP 100$
50$:	CLC
	ROR ZX,DSHT
100$:	
	RTS
SHTHPS:				;SHOOTERS NEW HORIZONTAL POSITION
	.BYTE 20,2A,2A,38
	.BYTE 40,48,58,68
STAB:				;ARM # FOR CURRENT SHOOT POSITION
	.BYTE 1,1,1,2
	.BYTE 3,4,5,7
JMPWT:				;WAIT FOR JUMP TIME COUNT
	.BYTE 8,8,8,8
	.BYTE 0C,10,14,18
	.PAGE
	.SBTTL	BALL CONTROL
	.REPT 0
******************************
*
*	BALL
*
******************************
	DESCRIPTION:	CALCULATE VERTICAL AND HORIZONTAL POSITION OF BALL
			ON SCREEN.  VERTICAL SCREEN POSITION (VPOSBL) IS A
			FUNCTION OF BOTH VERTICAL FLOOR POSITION (VFLRBL)
			AND HEIGHT ABOVE FLOOR OR BOUNCE HEIGHT (BNCHGT).
			THE FOLLOWING FOUR CASES ARE CONSIDERED:

			1.  PLAYER JUST PICKED UP BALL-INCLUDING STEAL
			2.  PLAYER IS DRIBBLING BALL OR ENDING JUMP AFTER CAPTURE
			3.  PLAYER IS SHOOTING BALL
			4.  THE BALL IS FREE, NOT CONTROLLED BY ANY PLAYER

	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED

	STACK USE:	8 BYTES

	BASE PAGE USE:
	.ENDR
BALL:
				;MAINTAIN BALCOD OR BALL STATUS
				;
	LDA Z,BALCOD
	BPL 4$			;BRANCH IF NOT CONTROLLED
	PHA
	LDA I,1B
	STA Z,BPIC		;MAKE SURE BALL IS VISIBLE
	PLA
	AND I,3			;ELSE LOOK AT SHOOT BUTTON OF CONTROLL PLAYER
	TAX
	LDA ZX,DSHT
	CMP I,0FE
	BEQ 2$			;BRANCH IF SHOOT BUTTON IS PUSHED - EDGE TRIGGERED
	CMP I,1
	BNE 4$			;BRANCH IF SHOOT BUTTON NOT JUST RELEASED
	LDA I,0			;ELSE BALL WAS RELEASED SO CLEAR BALCOD
	STA Z,BALCOD
	STA Z,BNCNT
	LDA I,1			;DISALLOW IMMEDIATE RE-CAPTURE
	STA Z,CAPLOK
	BNE 4$
2$:	LDA ZX,JMPHGT
	BNE 4$			;DONT ALLOW A SHOT UNTIL JUMP IS FINISHED
	LDA Z,BALCOD		;SET "SHOT IN PROGRESS" STATUS BIT
	ORA I,40
	STA Z,BALCOD
	AND I,3
	STA Z,SHOOTR
4$:
	LDA Z,CAPLOK
	BEQ 5$
	DEC Z,CAPLOK
	BNE 45$
5$:	LDX I,PN		;CHECK FOR CASE 1
10$:	JSR BPCOL		;SEE IF BALL HAS COLLIDED WITH PLAYER SPECIFIED
	BEQ 45$			;BY X.  BCOL RETURNS ACC=1 IF COLLISION OCCURRED;
				;ELSE ACC=0
				;***
;CASE1:				;CASE 1: PLAYER HAS COLLIDED WITH BALL.  SEE IF ITS
				;UNCONTROLLED AND START DRIBBLE.  IF CONTROLLED BY
				;ANOTHER PLAYER, ALLOW STEAL.
	LDA Z,NOTBLK		;FIRST, SEE IF GOALTENDING (SEE B954)
	BNE 45$			;DISALLOW CAPTURE IF GOALTENDING
	BIT Z,BALCOD
	BPL 30$			;BRANCH IF NOT CONTROLLED
				;ELSE TRY TO STEAL
	TXA			;$$$
	PHA			;SAVE X
	EOR I,1			;GET OPPONENTS NUMBER
	TAX
	BIT Z,BALCOD
	BVC 15$			;BRANCH IF BALL IS NOT BEING SHOT
	CMP Z,SHOOTR
	BNE 15$			;BRANCH IF YOU ARE SHOOTING BALL
	LDA ZX,ANTHGT		;ELSE OPPONENT IS SHOOTING BALL
	CMP I,2F
	BCC 15$			;BRANCH IF OPPONENT HAS CYCLED < 3 TIMES
	LDA I,20		;ELSE SHOOTING OPPONENT BECOMES VULNERABLE
	BPL 16$			;BRA
15$:	LDA I,3			;USE NARROW CAPTURE WINDOW
16$:	STA Z,TEMP1
	PLA
	TAX			;RESTORE X
	TYA			;GET DISPLACEMENT FROM PLAYER TO BALL
	CMP Z,TEMP1
	BCS 45$			;BRANCH IF NOT WITHIN CAPTURE RANGE
				;$$$
				;IF THEY DECIDE INVULNERABLE SHOOTERS
				;ARE O.K. REPLACE EVERYTHING BETWEEN DOLLAR
				;SIGNS WITH:
				;TYA; CMP I,4; BCS 45$
	TXA			;ALLOW PLAYER TO CAPTURE BALL; BUT,
	EOR FRAME		;TO GIVE AN EVEN CHANCE FOR STEALING
	LSR			;THE BALL, ONLY ALLOW PLAYER 0,2 TO TAKE
	BCC 45$			;BALL ON EVEN FRAMES AND PLAYER 1,3 TO TAKE
				;BALL ON ODD FRAMES
				;BRANCH IF CAPTURE NOT ALLOWED
24$:	LDA I,BAKVAL		;SET FLAG TO ROBOT ROUTINE SAYING "STOLEN"
	STA AX,ROBSTL
				;THIS POINT=PREGET IN COLLEEN BASKETBALL
	LDA Z,CAPLOK
	BNE 45$
25$:				;A PLAYER HAS JUST CAPTURED BALL
	TXA
	EOR BALCOD		;DISALLOW CAPTURING BALL FROM SELF
	AND I,3
	BNE 26$
	BIT Z,BALCOD
	BMI 50$
26$:	TXA			;START HIS DRIBBLE
	STX Z,DRIBLR
	ORA I,80
	STA BALCOD		;*** SET BALL CODE TO "CONTROLLED"
	LDA Z,CAPLOK
	BNE 28$
	LDA I,8
	STA Z,CAPLOK
28$:	LDA I,0
	STA Z,BNCNT		;CLEAR BOUNCE COUNTER
	STA Z,DRBTMR		;INIT DRIBBLE TIME SO BITS 4-0=0
27$:	BPL 50$			;BRANCH ALWAYS
30$:				;BALL IS NOT CONTROLLED (EQUIV. TO NTCONL)
	LDA ZX,CPICP
	AND I,3F
	CMP I,16
	BCC 35$			;BRANCH IF NOT JUMPING
	TYA			;GET DISPLACEMENT
	CMP I,2F		;ALLOW LARGER CAPTURE WINDOW
	BCS 35$
	LDA I,3F
	STA Z,CSNDFG		;INITIATE CROWD SOUND
	STA Z,CAPLOK		;LOCKOUT RECAPTURE WHEN CAPTURED BY JUMPING.
	BPL 25$			;BRA
35$:	TYA
	AND I,0F0		;ALLOW SMALLER CAPTURE WINDOW
	BEQ 24$
45$:	DEX			;CHECK REST OF PLAYERS
	BPL 10$
50$:				;CHECK OTHER CASES
	BIT Z,BALCOD
	BMI 53$
	JMP CASE4		;BALL IS FREE
53$:	BVS CASE3		;BRANCH IF BALL IS BEING SHOT
				;
CASE2:				;A PLAYER IS DRIBBLING THE BALL
	LDX Z,DRIBLR		;FIRST, POSITION BALL W.R.T. PLAYER
	LDA ZX,CVPPH
	STA Z,VFLRBL
	TXA			;TO POSITION HORIZONTALLY, USE A 2-BYTE
	AND I,1			;TABLE TO FIND OFFSET FROM PLAYER
	TAY
	LDA AY,BTAB
	CLC
	ADC ZX,CHPPH
	STA Z,RLHPBL
				;SECOND, BOUNCE BALL, BUT NOT IF THERE IS JUMHGT
				;LEFT
	LDA ZX,JMPHGT
	BEQ 5$			;BRANCH IF NO JUMP ELSE REPOSITION BALL
	CLC
	ADC ZX,CVPPH
	CLC
	ADC I,25
	STA Z,VPOSBL
	CLC
	LDA AX,CATCHT
	ADC ZX,CHPPH
	STA Z,RLHPBL
	LDA I,0
	STA Z,BNCHGT
	RTS
5$:
	LDA Z,DRBTMR
	AND I,0F
	CMP I,08
	BCC 10$
	EOR I,0F
10$:	ASL
	STA Z,BNCHGT
	INC Z,DRBTMR
	CMP I,2
	BCS 20$
	LDA I,80
	ORA Z,DSNDFG
	STA Z,DSNDFG
20$:	CLC
	LDA Z,VFLRBL
	ADC Z,BNCHGT
	STA Z,VPOSBL
	RTS
	.BYTE CHK1
				;
CASE3:				;A PLAYER IS SHOOTING THE BALL, I.E.
				;THE BALL IS SWINGING BACK AND FORTH OVER
				;PLAYERS HEAD.  WHEN BALL IS ACTUALLY
	LDA I,20		;LAUNCHED, CONTROL TRANSFERS TO CASE4: THE
	STA Z,BNCHGT		;BALL IS FREE
	LDX Z,DRIBLR
	TXA
	AND I,1			;PREPARE INDEX INTO TABLE TO FIND
	ASL			;HPOS AND VPOS OF BALL FOR THIS CURRENT
	ASL			;SHOOTING POSITON.
	ASL
	PHA
	LDA ZX,CPICP
	AND I,3F
	LSR			;GET A NUMBER (0-7)=LOGICAL SHOOT PICTURE
	CMP I,09
	BCC 1$
	LDA I,0			;PICS NOT INITIALIZED YET - FORCE ZERO
1$:	STA Z,TEMP1
	PLA
	ORA Z,TEMP1
	TAY
	LDA ZX,CHPPH
	CLC
	ADC AY,BHPTAB		;POSITION BALL OVER PLAYERS HEAD
	STA Z,RLHPBL
	TYA
	AND I,7
	TAY
	LDA ZX,CVPPH
	STA Z,VFLRBL
	LDA AY,BVPTAB
	STA Z,BNCHGT
	CLC
	ADC Z,VFLRBL
	STA Z,VPOSBL
				;NOW SET UP PARAMETERS FOR BALL TRAJECTORY IN
				;THE EVENT THAT THE BALL IS LAUNCHED FROM CURRENT
				;POSITION.
	LDA ZX,CPICP		;FIRST SET UP INTVEL.  THIS IS THE INITIAL
	AND I,3F
	LSR			;UPWARD VELOCITY OF BALL AND IS USED IN CALCULATING BOUNCE
	CMP I,09
	BCC 5$
	LDA I,0			;PICS NOT INITIALIZED YET - FORCE ZERO
5$:	TAY			;BOUNCE HEIGHT (SEE CASE 4)
	LDA AY,SHVTBH
	STA Z,INTVEL
	STA Z,CURMAG
	LDA AY,SHVTBL
	STA Z,CURMGL
	STA Z,INTVLL
				;NEXT SETUP HVEL AND VVEL.  THESE VALUES ARE
				;ACTUALLY COUNTERS.  THEY COUNT THE NUMBER OF
				;FRAMES THAT SHOULD PASS BEFORE CHANGING
				;HORIZONTAL AND VERTICAL POSITION.  THEY ARE
				;FOUND BY FINDING DELTA V AND DELTA H.  THEN
				;TO GET A SMALLER INCREMENT, DIVIDE BOTH DOWN
				;EQUALLY UNTIL ONE IS LESS THAN 4.
				;
				;FIND DELTA H TO BASKET
	TXA
	BEQ 10$
	LDA AY,DLTBNG		;PLAYER NUMBER=ODD SO SHOOT FOR LEFTSIDE
	STA Z,HBLINC
	LDA ZX,CHPPH
	JMP 15$
10$:	LDA AY,DLTBPS		;PLAYER NUMBER=EVEN SO SHOOT FOR RIGHTSIDE
	STA Z,HBLINC
	LDA ZX,CHPPH
	EOR I,0FF		;INVERT IT SINCE YOU'RE GOING TO OTHER SIDE
15$:	STA Z,TEMP6
	SEC
	SBC AX,HBASTB
	BPL 17$
	LDA Z,TEMP6
	BMI 17$			;BRANCH IF PLAYER DIST.>7F
	LDA I,1
17$:	STA Z,TEMP1		;TEMP1=DELTA H
				;
				;FIND DELTA V TO BASKET
	LDA ZX,CVPPH
	CMP I,VBASOF
	BCC 20$			;BRANCH IF PLAYER IS BELOW POLE
	SEC			;ELSE ABOVE POLE
	SBC I,VBASOF
	STA Z,TEMP1+1		;TEMP1+1=DELTA V
	LDA AY,DLTBNG
	JMP 25$
20$:	LDA I,VBASOF
	SEC
	SBC ZX,CVPPH
	STA Z,TEMP1+1		;TEMP1+1=DELTA V
	LDA AY,DLTBPS
25$:	STA Z,VBLINC
	JSR BADIVD
80$:	LDA Z,TEMP1
	STA Z,VVELBL
	STA Z,VVELCT
	LDA Z,TEMP1+1
	STA Z,HVELBL
	STA Z,HVELCT
	RTS
CASE4:				;BALL IS FREE
				;FREE BALL MOTION HAS 3 DIMENSIONS
				;WHICH ARE MAPPED ONTO 2-DIMENSIONAL
				;PLANE.  THIS INFORMATION IS KEPT IN
				;3 PARTS:
				; 1)  VERTICAL BALL POSITION:  VFLRBL
				;     (EQUIV. TO DEPTH DIMENSION)
				; 2)  HORIZONTAL BALL POSITION:  RLHPBL
				;     (EQUIV. TO LENGTH DIMENSION)
				; 3)  BOUNCE HEIGHT:  BNCHGT
				;     (EQUIV. TO HEIGHT DIMENSION)
				;VFLRBL AND BNCHGT ARE ADDED TOGETHER TO
				;MAP TO THE 2-DIMENSIONAL SCREEN.  SUM IS
				;CALLED VPOSBL.
	LDA I,3F
	STA Z,DRIBLR
	JSR BBCOL		;CHECK FOR BALL/BASKET COLLISION
				;COUNTDOWN FRAMES UNTIL TIME TO REPOSITION HORIZ.
				;BRANCH TO VERTICAL IF NOT ZERO
	DEC Z,HVELCT
	BNE 20$
	LDA Z,HVELBL
	STA Z,HVELCT
	LDA Z,HBLINC
	CLC
	ADC Z,RLHPBL		;ADD INCREMENT (+1 OR -1) TO
	STA Z,RLHPBL		;HORIZONTAL FLOOR POSITION OF BALL
20$:
				;COUNTDOWN FRAMES UNTIL TIME TO REPOSITION VERT.
	DEC Z,VVELCT
	BNE 40$
	LDA Z,VVELBL
	STA Z,VVELCT
	LDA Z,VBLINC
	CLC
	ADC Z,VFLRBL		;ADD INCREMENT (+1 OR -1) TO
	STA Z,VFLRBL		;VERTICAL FLOOR POSITION OF BALL
	
40$:				;NOW CALCULATE BOUNCE HEIGHT
	LDA Z,BNCHTL
	CLC
	ADC Z,CURMGL
	STA Z,BNCHTL
	LDA Z,BNCHGT
	STA Z,OLDBNC
	ADC Z,CURMAG
	STA Z,BNCHGT
	CMP I,0E0
	BCC 50$			;BRANCH IF NOT BOTTOM OF BOUNCE
	INC Z,BNCNT
	LDA Z,INTVEL
	BEQ 45$			;BRANCH IF BOUNCE VELOCITY HAS DECAYED TO 0
	LDA Z,INTVLL
	CLC
	ADC I,80
	STA Z,INTVLL
	STA Z,CURMGL
	LDA Z,INTVEL
	ADC I,0FF
	STA Z,INTVEL
	STA Z,CURMAG
	LDA I,80
	ORA Z,DSNDFG		;TURN ON DRIBBLE SOUND
	STA Z,DSNDFG
	JMP 50$
45$:	LDA I,0
	STA Z,CURMAG
	
50$:				;NOW UPDATE CURMAG WRT EFFECTS OF GRAVITY
	LDA Z,CURMGL
	CLC
	ADC I,GRAVL
	STA Z,CURMGL
	LDA Z,CURMAG
	ADC I,GRAVH
	STA Z,CURMAG
				;NOW ADD THE NEW BOUNCE HEIGHT ON TOP OF
	LDA Z,VFLRBL		;BALLS FLOOR POSITION
	CLC
	ADC Z,BNCHGT
	STA Z,VPOSBL
	CMP I,3C
	BCS 60$			;BRANCH IF BALL HAS NOT WRAPPED
	LDA I,1
	STA Z,BNCHI
	LDA I,1A		;BLANK BALL PICTURE
	STA Z,BPIC
	BPL 70$
60$:	LDA I,1B		;MAKE SURE BALL IS VISIBLE
	STA Z,BPIC
	LDA I,0
	STA Z,BNCHI
70$:
				;LESSEN VELOCITY PERIODICALLY
	LDA Z,BNCNT
	CMP I,4
	BNE 80$
72$:	LDA I,1
	STA Z,BNCNT
	LDA Z,VBLINC
	BEQ 75$
	BMI 73$
	DEC Z,VBLINC
	BPL 75$
73$:	INC Z,VBLINC
75$:	LDA Z,HBLINC
	BEQ 80$
	BMI 78$
	DEC Z,HBLINC
	BPL 80$
78$:	INC Z,HBLINC
80$:	RTS
				;TABLES FOR BALL CONTROL
				;
CATCHT:				;OFFSET DURING JUMP/CATCH
	.BYTE 2,0
HBASTB:				;HORIZONTAL BASKET OFFSET
	.BYTE 1C,10
BTAB:				;OFFSET FOR BALL DURING DRIBBLE: LEFT OR RIGHT
	.BYTE 8,-6		;EVEN # PLAYER SHOOTS TO THE RIGHT SO OFFSET IS
				;POSITIVE
SHVTBH:				;INITIAL UPWARD VELOCITY OF A SHOT
	.BYTE 3,3,3,3
	.BYTE 4,4,5,5
SHVTBL:
	.BYTE 80,80,0,80
	.BYTE 0,80,0,80
DLTBPS:				;DELTA H,V VELOCITY FOR BALL (POS)
	.BYTE 1,1,3,3
	.BYTE 3,3,3,3
DLTBNG:
	.BYTE 0FF,0FF,0FD,0FD
	.BYTE 0FD,0FD,0FD,0FD
BHPTAB:				;BALLS HORIZONTAL POSITION OVER PLAYER DURING SHOT
	.BYTE 7,7,6,6		;1ST 8 ENTRIES FOR PLAYERS SHOOTING TO RIGHT
	.BYTE 5,4,1,0
	.BYTE -4,-4,-3,-3	;2ND 8 ENTRIES FOR PLAYERS SHOOTING TO LEFT
	.BYTE -2,-1,2,3
BVPTAB:				;BALLS VERTICAL POSITION OVER PLAYER DURING SHOT
	.BYTE 14,17,19,1B
	.BYTE 1D,1F,20,20
	.PAGE
	.SBTTL	BALL DIVIDE
	.REPT 0
*************************
*
*	DIVIDE
*
*************************
	DESCRIPTION: BADIVD CALCULATES THE SLOPE OF THE
		     LINE BETWEEN TWO POINTS GIVEN DELTA
		     Y AND DELTA X BETWEEN THEM. ACTUALLY
		     THATS ALREADY THE SLOPE, BUT BADIVD
		     DIVIDES THESE DOWN TILL ONE IS LESS
		     THAN 4.
	INPUT:
		TEMP1=DELTA X (DELTA H)
		TEMP1+1=DELTA Y (DELTA V)
	OUTPUT:
		TEMP1=SCALED DELTA X
		      USE THIS FOR VERT. POSITION CHANGE TIMER
		TEMP1+1=SCALED DELTA Y
		        USE THIS FOR HOR. POSITIION CHANGE TIMER
	REGISTERS:
		IN: DONT CARE
		OUT: ACC BLITZED
	.ENDR
BADIVD:
;
;BEGIN DIVIDE
	TXA
	PHA
	LDX I,1
30$:	LDA ZX,TEMP1
	CMP I,4
	BCS 35$
	LDA I,4
35$:	STA ZX,TEMP1
	DEX
	BPL 30$
40$:
	LSR Z,TEMP1
	LSR Z,TEMP1+1
	LDX I,1
50$:	LDA ZX,TEMP1
	CMP I,2
	BEQ 80$
	CMP I,3
	BEQ 60$
	DEX
	BPL 50$
	BMI 40$
60$:
	LDA I,2
	STA ZX,TEMP1
	TXA
	EOR I,1
	TAX
	LDA ZX,TEMP1
	LSR
	LSR
	STA Z,TEMP2
	LDA ZX,TEMP1
	SEC
	SBC Z,TEMP2
	STA ZX,TEMP1
80$:	PLA
	TAX
	RTS
	.PAGE
	.SBTTL	BASKET
	.REPT 0
*************************
*
*	BASKET
*
*************************
	DESCRIPTION:	OUTPUT THE BASKETS TO THE SCREEN.
			ASSIGN INITAL PICTURE CODES AND
			LOCATION.
	REGISTER:
		IN:	DONT CARE
		OUT:	BLITZED
	.ENDR
BASKET:
	LDX I,1
5$:	LDA AX,BASHP		;FIRST ASSIGN LOCATIONS
	STA ZX,LHPPH+2
	CLC
	ADC I,8
	STA ZX,CHPPH+2
	CLC
	ADC I,8
	STA ZX,RHPPH+2
	LDA AX,BASVP
	STA ZX,LVPPH+2
	STA ZX,CVPPH+2
	STA ZX,RVPPH+2
	LDA AX,BASPIC		;SECOND, ASSIGN PICTURES
	BMI 10$			;BRANCH IF RIGHT SIDE BASKET
	STA ZX,LPICP+2
	CLC
	ADC I,1
	STA ZX,CPICP+2
	CLC
	ADC I,1
	STA ZX,RPICP+2
	JMP 20$
10$:	STA ZX,LPICP+2
	SEC
	SBC I,1
	STA ZX,CPICP+2
	SEC
	SBC I,1
	STA ZX,RPICP+2
20$:	
	DEX
	BPL 5$
	RTS
	;
	;
	;
BASHP:	.BYTE 4,0E4		;BASKET HORIZONTAL POSITION
BASVP:	.BYTE 0A8,0A8		;BASKET VERTICAL POSITION
BASPIC:	.BYTE 1C,9E		;BASKET PICTURE
	.PAGE
	.SBTTL	 BALL-BASKET COLLISION DETECT
	.REPT 0
*************************
*
*	BBCOL
*
*************************
	DESCRIPTION:	DETECT AND RESPOND TO BALL
			HITTING BASKET AND BACKBOARD
	REGISTERS:
		IN:	DONT CARE
		OUT:	BLITZED
	STACK USE:	6 BYTES
	BASE PAGE:	TEMP2,TEMP3,TEMP5
	.ENDR
BBCOL:				;FIRST,CHECK FOR BACKBOARD
				;ASSUME BALL IS FREE...I.E, CALLED
				;FROM CASE4 OF "BALL"
	LDA Z,NOBAS
	BEQ 10$
	DEC Z,NOBAS
	BEQ 10$
	JMP EXITB		;JUMP IF BASKET COLLISION IS DISALLOWED
10$:	LDA Z,RLHPBL
	BMI 20$			;BRANCH IF NEAR RIGHTSIDE
	LDX I,0
	BPL 30$			;BRA
20$:	LDX I,1
30$:	LDA AX,BASVP		;SEE IF VFLRBL IS IN BALL PARK OF
	SEC			;BASKET BASE
	SBC I,20
	SEC
	SBC Z,VFLRBL
	BPL 33$
	EOR I,0FF
	CLC
	ADC I,1
33$:	CMP I,18
	BCC 34$			;BRANCH IF WITHIN 18, ELSE TOO
	JMP EXITB		;FAR AWAY, SO SKIP BASKET COLLISION TOO
34$:	CPX I,0
	BEQ 36$
	LDA AX,BASHP
	CLC
	ADC I,5
	JMP 38$
36$:	LDA AX,BASHP		;GET HORIZONTAL POSITION OF BACKBD.
	CLC
	ADC I,0C		;ADD FUDGE TO GET TO BOARD (FUDGE??)
38$:	SEC
	SBC Z,RLHPBL
	BPL 39$
	EOR I,0FF
	CLC
	ADC I,1
39$:	CMP I,3
	BCS 50$			;BRANCH IF BALL IS .GT. 3 FROM BASKET HORIZONTALLY
	LDA AX,BASVP
	SEC
	SBC I,7F
	BPL 40$
	EOR I,0FF
	CLC
	ADC I,1
40$:	CLC
	ADC I,10		;SUBTRACT VALUE TO GET TO CENTER
				;OF BACKBOARD
	SEC
	SBC Z,BNCHGT		;FIND DISTANCE FROM BALL TO BACKBOARD
	BPL 42$
	EOR I,0FF
	CLC
	ADC I,1
42$:	CMP I,10
	BCS 50$			;BRANCH IF BALL IS MORE THAN
				;10 FROM CENTER OF BACKBOARD
	CPX I,0
	BEQ 45$
	LDA Z,HBLINC
	BMI 50$
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,HBLINC
	JMP 47$
45$:	LDA Z,HBLINC
	BPL 50$
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,HBLINC
47$:	LDA Z,DSNDFG
	ORA I,80
	STA Z,DSNDFG
	LDA Z,HBLINC
	BMI 48$
	DEC Z,HBLINC
	BPL 50$
48$:	INC Z,HBLINC
50$:				;SECOND, LOOK FOR BASKET COLLISION
	LDA Z,BNCNT
	BNE 51$			;BRANCH IF BALL HAS BOUNCED
	LDA Z,OLDBNC
	CMP Z,BNCHGT
	BCC 51$			;BRANCH IF OLDBNC<BNCHGT, I.E. BALL IS GOING UP
	LDA AX,BASHP
	CPX I,0
	BEQ 52$
	CLC
	ADC I,2
	JMP 53$
51$:	JMP EXITB
52$:	CLC
	ADC I,10
53$:	SEC
	SBC Z,RLHPBL
	BPL 55$
	EOR I,0FF
	CLC
	ADC I,1
55$:	CMP I,6
	BCS EXITB		;BRANCH IF BALL IS MORE THAN 8
				;AWAY FROM BASKET HORIZONTALLY
				;ELSE CHECK BOUNCE HEIGHT
	LDA AX,BASVP
	SEC
	SBC I,7F
	BPL 60$
	EOR I,0FF
	CLC
	ADC I,1
60$:
	STA Z,TEMP5
	CLC
	ADC I,4
	SEC
	SBC Z,BNCHGT
	BPL 65$
	EOR I,0FF
	CLC
	ADC I,1
65$:	CMP I,4
	BCS EXITB		;BRANCH IF BOUNCE HEIGHT IS
				;NOT WITHIN 4 OF RIM
				;ELSE SHOULD ALSO CHECK VFLRBL
				;BUT SINCE ALREADY CHECKED ABOVE,
				;SKIP IT NOW
				;
				;
				;BASKET!!!
	LDA AX,BASHP
	CPX I,0
	BEQ 70$
	CLC
	ADC I,4
	JMP 80$
70$:	CLC
	ADC I,10
80$:	STA Z,RLHPBL
	LDA I,7F
	STA Z,VFLRBL
	LDA Z,TEMP5
	STA Z,BNCHGT
	STA Z,NOBAS
	LDA I,0
	STA Z,VBLINC
	STA Z,VVELCT
	STA Z,VVELBL
	STA Z,HBLINC
	STA Z,HVELCT
	STA Z,HVELBL
	STA Z,CURMAG
	STA Z,INTVEL
	JSR SCRIT			;SCORE POINTS
	LDA I,3F
	STA Z,CSNDFG		;INITIATE CROWD SOUND
	LDA I,8
	STA AX,ROBDEL		;DELAY ROBOT MOVEMENT
	TXA
	EOR I,1
	TAX
	LDA I,8
	STA AX,ROBDEL
	LDA I,38
	STA Z,POSCNT		;DELAY BEFORE REPOSITIONING LOSER FOR REBOUND
	STA Z,CAPLOK		;DISALLOW CAPTURE WHILE BALL FALLS THRU HOOP
EXITB:	
	RTS
	.PAGE
	.SBTTL	BOUNDARY CHECK
	.REPT 0
	
**************************
*
*	BNDCHK
*
**************************

	DESCRIPTION: KEEP PLAYERS AND BALL IN-BOUNDS (NO WRAP-A-ROUND)

	REGISTERS:
		IN:	DONT CARE
		OUT:	ALL BLITZED
	.ENDR
TOPBND	=0B6
BOTBND	=03C
RTBND	=0F0
LTBND	=08
			;
BTPBND	=0B8
BBTBND	=03C
BRTBND	=0F8
BLTBND	=4
			;
			;
BNDCHK:
	LDA I,0
	STA Z,COLFLG
	STA Z,COLFLG+1
	STA A,COLFGH+1
	STA A,COLFGH
	LDX I,PN
5$:	LDA ZX,CVPHT
	CMP I,TOPBND
	BCC 10$
	LDA I,TOPBND
	STA ZX,CVPHT
	STA ZX,COLFLG
10$:	CMP I,BOTBND
	BCS 20$
	LDA I,BOTBND
	STA ZX,CVPHT
	STA ZX,COLFLG
20$:
	LDA ZX,CHPHT
	CMP I,RTBND
	BCC 30$
	LDA I,RTBND
	STA ZX,CHPHT
	STA ZX,COLFLG
	STA AX,COLFGH
30$:	CMP I,LTBND
	BCS 40$
	LDA I,LTBND
	STA ZX,CHPHT
	STA ZX,COLFLG
	STA AX,COLFGH
40$:
	DEX
	BPL 5$
				; NOW CHECK BALL
	LDA Z,VFLRBL
	CMP I,BTPBND
	BCS 57$			;BRANCH IF BALL IS ABOVE TOP BOUND
50$:	CMP I,BBTBND
	BCS 60$
55$:	LDA Z,VBLINC
	BPL 60$			;BRANCH IF INCREMENT IS MINUS
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,VBLINC
	JMP 60$
57$:	LDA Z,VBLINC
	BMI 60$
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,VBLINC
60$:
	LDA Z,RLHPBL
	CMP I,BRTBND
	BCS 72$
	CMP I,BLTBND
	BCS 80$
70$:	LDA Z,HBLINC
	BPL 76$
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,HBLINC
	JMP 76$
72$:	LDA Z,HBLINC
	BMI 75$
	EOR I,0FF
	CLC
	ADC I,1
	STA Z,HBLINC
75$:	
	LDA Z,BALCOD		;GET BALL STATUS
	BMI 80$			;BRANCH IF CONTROLLED
	LDA I,0E8		;COLLISION OCCURRED AT L/R BOUND SO
	BMI 77$			;RESET BALL TO CORNER
76$:	LDA Z,BALCOD
	BMI 80$
	LDA I,10
77$:	STA Z,BALOFF
	LDA I,40
	STA Z,BALDES
	LDA I,0
	STA Z,CURMGL
	STA Z,INTVLL
	STA Z,CURMAG
	STA Z,INTVEL
	STA Z,VBLINC
	STA Z,HBLINC
	LDA I,1A
	STA Z,BPIC		;BLANK OUT BALL
	LDA Z,SLEWFG
	BNE 79$
	LDA I,0F		;START COUNTER
	STA A,BALREP		;(SEE SLEW)
	LDA Z,BNCHGT
	CLC
	ADC Z,VFLRBL
	STA Z,VFLRBL
	LDA I,0
	STA Z,BNCHGT
	LDA Z,RLHPBL		;NEXT REPOSITION PLAYER
	BMI 78$			;BRANCH IF BALL IS ON RIGHT
	LDA I,0			;ELSE ON LEFT SO REPOSITION PLAYER 1
	BPL 79$
78$:	LDA I,1
79$:	ORA I,0C0
	STA Z,SLEWFG		;SET FLAG TELLING SLEW TO DO IT AND WHOM TO DO IT TO
80$:	RTS
	.PAGE
	.SBTTL	BALL/PLAYER COLLISION
	.REPT 0
***************************
*
*	BPCOL
*
***************************
	DESCRIPTION:	SOFTWARE COLLISION DETECT.  MODELS COLLEENS HARDWARE
			DETECT AS CLOSELY AS POSSIBLE.  CHECKS FOR COLLISION
			BETWEEN BALL AND PLAYER (X).  COLLISION OCCURS WHEN
			BOTH OF FOLLOWING CONDITIONS OCCURS:

			[PLAYER BOTTOM EDGE	< BALL		< PLAYER TOP EDGE]
			VPOS(PLAYER)-12		< VPOS(BALL)	< VPOS(PLAYER)+16

			[PLAYER LEFT SIDE	< BALL		< PLAYER RIGHT EDGE]
			HPOS(PLAYER)-9.	< HPOS(BALL)	< HPOS(PLAYER)+9.

	REGISTERS:
		IN:	X=PLAYER NUMBER, Y=DON'T CARE
		OUT:	X=PLAYER NUMBER, Y=ABS. VAL OF DELTA VPOS + DELTA HPOS
			ACC=1 IF COLLISION OCCURRED ELSE ACC=0

	BASE PAGE:

	STACK USE:
	.ENDR
	.BYTE CHK2
BPCOL:
;WARNING:  THIS ROUTINE USES THE FLOOR POS. OF BALL WITH BOUNC
;HEIGHT  ADDED IN
	LDA Z,BNCHI		;DISALLOW COLLISION IF HIGH BOUNCE IS SET, I.E. BALL HAS WRAPPED
	BNE 100$
	LDA ZX,CHPPH		;HPOS(PLAYER)
	SEC
	SBC I,9		;GET TO LEFT EDGE
	CMP Z,RLHPBL		;HPOS(BALL)
	BCS 100$		;I.E. BRANCH IF HPOS(PLAYER) > HPOS(BALL)
	LDA ZX,CHPPH
	CLC
	ADC I,0A			;GET RIGHT EDGE OF PLAYER
	CMP Z,RLHPBL
	BCC 100$		;I.E.BRANCH IF HPOS(PLAYER) < HPOS(BALL)
	LDA ZX,CVPPH		;VPOS(PLAYER)
	SEC
	SBC I,0C		;GET TO BOTTOM EDGE
	CMP Z,VFLRBL		;VPOS(BALL)
	BCS 100$		;I.E. BRANCH IF VPOS(PLAYER) > VPOS(BALL)
	LDA ZX,CVPPH
	CLC
	ADC I,10		;GET TO TOP EDGE
	CMP Z,VFLRBL
	BCC 100$		;I.E. BRANCH IF VPOS(PLAYER) < VPOS(BALL)
				;COLLISION!!!!!
				;RETURN ASB VAL OF DELTA VPOS
	LDA Z,VFLRBL
	SEC
	SBC ZX,CVPPH
	BPL 10$
	EOR I,0FF
	CLC
	ADC I,1
10$:	CLC
	ADC Z,BNCHGT
	TAY			;Y=DISTANCE FROM PLAYER(X) TO BALL
	LDA I,1			;RETURN ACC=1, FLAG THAT COLLISION OCCURRED
	RTS
100$:
	LDA I,0			;NO COLLISION, RETURN ACC=0
	RTS
	.SBTTL	CLOCK
	.REPT 0
*************************
*
*	CLOCK
*
*************************
	DESCRIPTION:	COUNTDOWN GAME TIMER AND UPDATE DISPLAY. COMPANION
			ROUTINE:

			CONVERT - SELECTS PLAYS/TIME PER COIN AND CONVERTS
			CREDITS TO TIME

	REGISTERS:
		IN:	DON'T CARE
		OUT:	ACC=0 TO STOP GAME
			ACC=1 TO CONTINUE GAME
	.ENDR
CLOCK:
		;GTIME:  COUNTS 1/60 SECONDS
		;GTIME+1:  COUNTS SECONDS
		;GTIME+2:  COUNTS MINUTES TO 99
	LDA Z,GSTAT
	BPL 102$		;BRANCH IF NOT GAME MODE
	LDA Z,FREFLG
	BNE 112$		;BRANCH IF FREEZE MODE
	SED
	LDA Z,GTIME
	BNE 30$			;BRANCH IF STILL WAITING FOR A SECOND
	LDA Z,GTIME+1
	BNE 10$			;BRANCH IF NO BORROW NECESSARY
	LDA Z,GTIME+2
	BEQ 110$		;BRANCH IF NO MORE TIME-END GAME
	SEC			;ELSE BORROW FROM MINUTES/RESET SECONDS
	SBC I,1
	STA Z,GTIME+2
	LDA I,59
	STA Z,GTIME+1
	BPL 20$			;BRA
10$:	LDA Z,GTIME+1		;DECREMENT SECONDS
	SEC
	SBC I,1
	STA Z,GTIME+1
20$:	LDA I,59		;RESET 1/60 SECONDS
	STA Z,GTIME
	CLD
	JSR TIMOUT
	JMP 100$		;BRA
30$:	LDA Z,GTIME		;DECREMENT 1/60 SECONDS
	SEC
	SBC I,1
	STA Z,GTIME
100$:	CLD
				;CHECK FOR 30-SEC. WARNING
	LDA Z,GTIME+2
	BNE 101$
	LDA Z,GTIME+1
	CMP I,32
	BCS 101$
	JSR ADDOUT
	LDA Z,GTIME+1
	CMP I,31
	BNE 102$
	LDA I,3F
	STA Z,WSNDFG		;START 30-SEC WARNING SOUND
	LDA I,1
	RTS
101$:	JSR BADOUT
102$:	LDA I,1			;CONTINUE GAME
	RTS
110$:	CLD
	LDA I,0F
	STA Z,CSNDFG
	LDA I,87
	STA Z,MSNDFG
112$:	LDA I,0			;STOP GAME
	RTS
	.PAGE
	.SBTTL	CONVERT
	.REPT 0
*************************
*
*	CONVERT
*
*************************
	DESCRIPTION:	SELECT TIME PER COIN.  CONVERT CREDITS TO TIME
			AS NECESSARY, AND JAM IN VALUES IF IN "FREE
			PLAY".

	REGISTERS:
		IN:	DON'T CARE
		OUT:	BLITZED
	.ENDR
CONVERT:
	LDA Z,$CNCT
	BEQ 5$
	DEC Z,$CNCT
	INC Z,TWO
	JSR DOIT
5$:	LDA Z,$CNCT+1		;$CNCT=MECH 1; $CNCT+1=MECH2
	BEQ FREECK		;MECHZ=SPECIAL IF OPTSW SAY SO
	LDA A,OPTSW
	EOR I,0FF
	AND I,MKDLLR
	LSR
	LSR
	LSR
	TAY
	DEC Z,$CNCT+1
	LDA AY,VALUE
	TAY
8$:	JSR DOIT
	INC Z,TWO
	DEY
	BNE 8$
	JMP FREECK
DOIT:	LDA A,OPTSW
	EOR I,0FF
	AND I,MKTIME
	ASL
	TAX
	SED
	LDA AX,TIMTBL
	CLC
	ADC Z,GTIME+1
	CMP I,60
	BCC 10$
	SBC I,60
10$:	STA Z,GTIME+1
	LDA AX,TIMTBL+1
	ADC Z,GTIME+2
	BCS 20$
	STA Z,GTIME+2
20$:	CLD
	RTS
FREECK:
	JSR TIMOUT
	LDA A,OPTSW
	EOR I,0FF
	AND I,MKTIME
	BNE 110$			;BRANCH IF NOT FREE PLAY
	LDA Z,GTIME+1
	ORA Z,GTIME+2
	BNE 110$
	LDA Z,GSTAT
	BNE 110$
	LDA I,4
	STA Z,$CNCT
110$:	RTS
				;
				;
				;
TIMTBL:				;TABLE OF TIME/CREDIT INDEXED BY OPTION SWITCHS
	.WORD 0100		;1:00 IN FREE PLAY (WITH 4 CREDITS JAMMED=4 MIN).
	.WORD 0230		;02:30 MINUTES PER CREDIT
	.WORD 0200		;02:00
	.WORD 0130		;01:30
	.WORD 0115		;01:15
	.WORD 0045		;00:45
	.WORD 0030		;00:30 MINUTES PER CREDIT (SWITCHS 1,2,3=OFF,ON,ON)
	.WORD 0100		;1:00 MINUTES PER CREDIT (SWITCHES 1,2,3=ON,ON,ON)
VALUE:
	.BYTE 6,4,5,1
	.PAGE
	.SBTTL	FLASH START LAMPS
	.REPT 0
*************************
*
*	FLSHBT
*
*************************
	DESCRIPTION:	FLASH START BUTTONS AS APPROPRIATE
	.ENDR
FLSHBT:	LDY I,3
	LDX I,PN
5$:	LDA Z,GSTAT
	BNE 10$
	DEY
	STA AY,LED1
	BEQ 30$
10$:
	LDA ZX,PSTAT
	ASL
	BMI 20$			;BRANCH IF STARTED
	LDA Z,FRAME
	AND I,10
	BEQ 20$			;FLASH IF NOT STARTED
	DEY
20$:	STA AY,LED1
30$:	LDY I,1
	DEX
	BPL 5$
	RTS
	.PAGE
	.SBTTL	KEEPUP
	.REPT 0
***********************
*
*	KEEPUP
*
***********************
	DESCRIPTION:	THE MOVEMENT ROUTINE MOVES ONLY THE CENTER MOTION
			OBJECT OF THE 3 OBJECT COMPOSITE THAT MAKES A PLAYER.
			THIS ROUTINE MAKES SURE THE OTHER 2 PIECES KEEPUP WITH
			THE CENTER.
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
	.ENDR
KEEPUP:
	LDX I,PN
	LDA ZX,PSTAT
	BMI 100$
10$:	LDA ZX,CPICP
	AND I,3F
	CMP I,17
	BEQ 50$			;BRANCH IF JUMPING
	LDA ZX,CHPPH
	CLC
	ADC I,8
	STA ZX,RHPPH
	SEC
	SBC I,16.
	STA ZX,LHPPH
	LDA ZX,CVPPH
	STA ZX,RVPPH
	STA ZX,LVPPH
	JMP 100$
50$:
	LDA ZX,CPICP
	BMI 70$			;BRANCH IF FACING LEFT
	LDA ZX,CHPPH
	SEC
	SBC I,4
	STA ZX,RHPPH
	SEC
	SBC I,4
	STA ZX,LHPPH
	LDA ZX,CVPPH
	STA ZX,LVPPH
	CLC
	ADC I,8
	STA ZX,RVPPH
	JMP 100$
70$:
	LDA ZX,CHPPH
	CLC
	ADC I,4
	STA ZX,LHPPH
	CLC
	ADC I,4
	STA ZX,RHPPH
	LDA ZX,CVPPH
	STA ZX,RVPPH
	CLC
	ADC I,8
	STA ZX,LVPPH
100$:	DEX
	BPL 10$
	RTS
	.PAGE
	.SBTTL	PLAYER ANTIMATION
	.REPT 0
*************************
*
*	PLAYER
*
*************************
			1)  MAKE SURE CENTER, LEFT, RIGHT PIECES FACE
			    CORRECT DIRECTION AND ARE ORIENTED PROPERLY
			2)  MAKE SURE CORRECT ACTION PICTURE IS BEING
			    OUTPUT (DRIBBLE, JUMP, ETC)
			3)  SEQUENCE THRU ANTIMATION
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
	BASE PAGE:
			LOTS
	STACK USE:
			ONE BYTE
	.ENDR
PLAYER:
	LDA Z,FRZIT
	BEQ 10$
	DEC Z,FRZIT
	BEQ 10$
	RTS
10$:	LDX I,PN		;X INDEXES THRU 2 PLAYERS
PLAY1:	LDA ZX,PSTAT
	BPL 10$			;BRNACH IF VISIBLE
	JMP PLAY9
10$:	LDA Z,BALCOD
	BMI 15$			;BRANCH IF BALL IS CONTROLLED
	CLC
	LDA ZX,PSTAT		;ELSE BALL IS NOT CONTROLLED SO
	ROR			;FACE DIRECTION OF TRAVEL
	LDA I,0
	ROR			;PUT DIRECTION (L/R) IN D7
	JMP PLAY3		;REST OF SETUP IS JUST LIKE WHEN BALL IS
				;CONTROLLED, BUT YOU DON'T HAVE IT
15$:
	AND I,3			;BALL IS CONTROLLED
	STA Z,TEMP1		;TEMP1=NUMBER (0-1) OF CONTROLLING PLAYER
	CPX Z,TEMP1
	BEQ 20$			;BRANCH IF YOU HAVE IT
	JMP PLAY2
20$:	TXA
	PHA
	CLC
	ROR
	ROR
	STA Z,TEMP1		;TEMP1=BEGINNING OF PICTURE CODE
	LDA ZX,PSTAT
	AND I,0FE
	STA ZX,PSTAT
	PLA
	ORA ZX,PSTAT
	STA ZX,PSTAT		;UPDATE DIRECTION BIT IN STATUS BYTE
	BIT Z,BALCOD
	BVS 30$			;BRANCH IF SHOOTING
	JMP PLAY4			;ELSE DO DRIBBLE
30$:				;DO SHOOT ANTIMATION
	LDA ZX,CPICP
	AND I,3F
	CMP I,10
	BCC 35$			;BRANCH IF PICTURES HAVE BEEN INITIALIZED
	LDA I,10.
	STA ZX,ANTMR
	LDA I,0
	STA ZX,ANTHGT
	TXA
	ROR
	LDA I,2
	ROR
	STA ZX,CPICP
	BMI 33$
	LDA I,0
	STA ZX,LPICP
	LDA I,1A
	STA ZX,RPICP
	BPL 35$
33$:	LDA I,80
	STA ZX,RPICP
	LDA I,1A
	STA ZX,LPICP
35$:				;TIME/SEQUENCE THRU SHOOT ANTIMATION
	DEC ZX,ANTMR
	BNE 100$
	LDA I,8
	STA ZX,ANTMR
	INC ZX,ANTHGT
	LDA ZX,ANTHGT
	AND I,0F
	CMP I,8
	BCC 38$
	EOR I,0F
38$:	ASL
	ORA I,1
	STA Z,TEMP1
	LDA ZX,CPICP
	AND I,80
	ORA Z,TEMP1
	STA ZX,CPICP
100$:	JMP PLAY9
PLAY2:				;YOU DON'T HAVE BALL, BUT SOMEBODY DOES
	TXA
	EOR I,1
	TAY
	LDA AY,CHPPH		;GET OPPONENTS POSITION
	LSR
	STA Z,TEMP1
	LDA ZX,CHPPH
	LSR
	SEC
	SBC Z,TEMP1
	BMI 55$			;BRANCH IF PLAYER IS TO LEFT OF DRIBBLER
				;ELSE PLAYER IS TO THE RIGHT SO FACE LEFT
	LDA I,80
	BMI PLAY3
55$:	LDA I,0
PLAY3:
	STA Z,TEMP1		;TEMP1=BEGINNING OF PICTURE CODE
	LDA ZX,PSTAT
	AND I,0FE
	STA ZX,PSTAT
	LDA Z,TEMP1
	ROL
	ROL
	AND I,1
	ORA ZX,PSTAT
	STA ZX,PSTAT		;UPDATE L/R DIR. BIT
	LDA ZX,CPICP
	AND I,3F
	CMP I,16
	BCS 70$			;BRANCH IF ALREADY JUMPING
				;ELSE SEE IF JUMP BUTTON IS PUSHED
	LDA ZX,DSHT
	CMP I,0FE
	BEQ 10$			;BRANCH IF JUMPING-
				;A POTENTIAL INFINITE LOOP EXISTS HERE.
				;JUMPING TO PLAY4 IS OK., BUT PLAY4 CAN JUMP
				;BACK TO PLAY3 ETC.
				;TO GET OUT OF THIS POTENTIAL LOCKUP, A
				;COUNTER CALLED LCKOUT IS INCREMENTED.  IF IT
				;EVER GETS TO A CERTAIN COUNT, A JUMP TO PLAY9
				;IS FORCED.  THE MAIN LOOP MUST CLEAR LCKOUT.
	INC Z,LCKOUT
	LDA Z,LCKOUT
	CMP I,4
	BNE 5$
	LDA I,0
	STA ZX,JMPHGT		;CLEARING JMPHGT WILL STOP THE LOOP(SEE PLAY4)
5$:	JMP PLAY4		; GO RUN
10$:	LDA I,2
	STA ZX,ANTMR
	STA ZX,JMPHGT
	LDA I,0
	STA ZX,ANTHGT
	LDA I,17		;ELSE INITIATE JUMP SEQUENCE
	ORA Z,TEMP1
	STA ZX,CPICP
	BMI 65$			;BRANCH IF FACING LEFT
	LDA I,16
	STA ZX,LPICP
	LDA I,18
	STA ZX,RPICP
	JMP PLAY9
65$:	LDA I,96
	STA ZX,RPICP
	LDA I,98
	STA ZX,LPICP
	JMP PLAY9
70$:				;PLAYER IS JUMPING
	DEC ZX,ANTMR
	BEQ 71$
	JMP PLAY9
71$:	LDA I,2
	STA ZX,ANTMR
	INC ZX,ANTHGT
	LDA ZX,ANTHGT
	AND I,0F
	CMP I,8
	BCC 73$
	EOR I,0F
73$:	ASL
	BNE 76$			;JMPHGT FLAGS "BALL" THAT A JUMP IS IN
	LDA I,1			;PROGRESS, SO IT MUST BE NON-ZERO
76$:	STA ZX,JMPHGT
	LDA ZX,ANTHGT
	CMP I,10
	BCS 74$			;BRANCH IF JUMP IS DONE
	JMP PLAY9
74$:	LDA I,0
	STA ZX,JMPHGT		;ELSE END JUMP
	LDA ZX,CPICP		;END JUMP BY PUTTING DRIBBLE PICS IN
	AND I,80
	ORA I,12
	STA ZX,CPICP
	BMI 75$			;BRANCH IF FACING LEFT
	LDA I,10
	STA ZX,LPICP
	LDA I,15
	STA ZX,RPICP
	JMP PLAY9
75$:	LDA I,90
	STA ZX,RPICP
	LDA I,95
	STA ZX,LPICP
	LDA I,8
	STA ZX,ANTMR
	JMP PLAY9
PLAY4:				;PLAYER IS RUNNING OR STANDING
				;CHECK FOR SPECIAL CASE:
				;PLAYER MAY HAVE CAPTURED BALL DURING JUMP SO
				;FINISH JUMP BEFORE STARTING DRIBBLE
	LDA ZX,JMPHGT
	BEQ 1$			;BRANCH IF NOT JUMPING
	LDA ZX,CPICP
	AND I,80		;SET UP DIRECTION
	JMP PLAY3
1$:	STA ZX,ANTHGT		;ZERO CNTR AND
	DEC ZX,ANTMR		;DO ANTIMATION
	LDA ZX,ANTMR
	BPL PLAY9
	LDA I,5
	STA ZX,ANTMR
	LDA ZX,PSTAT
	AND I,2
	BEQ 5$			;BRANCH IF NOT MOVING
	LDA ZX,CPICP
	EOR I,1			;ALTERNATE CENTER PIECE
	STA ZX,CPICP
				;NOW USE CENTER ANTIMATION BIT TO ALSO ALTERNATE
				;LEFT/RIGHT PIECES SO WHOLE BODY IS ANTIMATED -
				;WHEN MOVING
5$:	LDA ZX,CPICP
	AND I,1
	ORA Z,TEMP1
	STA Z,TEMP1		;TEMP1 CONTAINS CORRECT DIRECTION AND
	LDA I,12		;ANTIMATION BITS (D7 AND D0)
	ORA Z,TEMP1
	STA ZX,CPICP
	BMI 10$			;BRANCH IF FACING LEFT
	LDA I,10
	ORA Z,TEMP1
	STA ZX,LPICP
	LDA ZX,RPICP
	AND I,7E
	CMP I,14
	BEQ 75$			;BRANCH IF PICTURE IS CORRECT
	LDA I,14
	ORA Z,TEMP1
	STA ZX,RPICP
	BPL 75$			;BRANCH ALWAYS
10$:	LDA I,10
	ORA Z,TEMP1
	STA ZX,RPICP
	LDA ZX,LPICP
	AND I,7E
	CMP I,14
	BEQ 75$			;BRANCH IF PICTURE IS CORRECT
	LDA I,14
	ORA Z,TEMP1
	STA ZX,LPICP
75$:				;CHECK FOR 2 SPECIAL CASES:
				;
				;FIRST SUPPRESS HAND ANTIMATION FOR A NON-DRIBBLER
	LDA Z,BALCOD
	BPL 80$			;BRANCH IF BALL IS NOT CONTROLLED
	AND I,3
	STA Z,TEMP2
	CPX Z,TEMP2
	BEQ 90$			;BRANCH IF PLAYER IS DRIBBLING
80$:	LDA ZX,CPICP		;ELSE SUPPRESS HAND ANTIMATION
	BMI 85$
	LDA I,14
	STA ZX,RPICP
	BPL PLAY9
85$:	LDA I,94
	STA ZX,LPICP
	BMI PLAY9
90$:				;SECOND, FORCE HAND ANTIMATION FOR A
	LDA ZX,CPICP		;STANDING DRIBBLER
	BMI 95$
	LDA ZX,RPICP
	EOR I,1
	STA ZX,RPICP
	BPL PLAY9
95$:	LDA ZX,LPICP
	EOR I,1
	STA ZX,LPICP
PLAY9:
	DEX
	BMI 101$
	JMP PLAY1
101$:	RTS
	.PAGE
	.SBTTL	PLAYFIELD OUTPUT
	.REPT 0
**********************************
*
*	PFOUT
*
**********************************
	DESCRIPTION:	OUTPUT THE BASKETBALL COURT

	REGISTERS:
		IN:	DON'T CARE
		OUT:	Y BLITZED

	STACK USE:	NONE

	BASE PAGE USE:	TEMP1
	.ENDR
PFOUT:
	LDA I,N			;N=NULL OR BLANK CHARACTER
	LDY I,0
5$:	STA AY,PF
	STA AY,PF+100
	STA AY,PF+200
	STA AY,PF+2C0		;DON'T CLEAR BASE MOTION RAM
	INY
	BNE 5$
	LDA I,BASE&0FF		;BASE=BASE ADDR FOR BEGINNING OF COURT
	STA Z,TEMP1
	LDA I,BASE&0FF00/100
	STA Z,TEMP1+1		;TEMP1=INDEX ACROSS SCREEN
	LDA I,PFTAB&0FF
	STA Z,TEMP2
	LDA I,PFTAB&0FF00/100
	STA Z,TEMP2+1		;TEMP2=INDEX THRU TABLE OF PF STAMPS
	LDY I,0
10$:	LDA NY,TEMP2		;GET NEXT COURT STAMP
	CMP I,END		;END=TERMINATING FLAG
	BEQ 100$
	STA NY,TEMP1		;STORE IT IN PLAYFIELD
				;SINCE PLAYFIELD IS A MIRROR RELECTION,
				;WITH A LITTLE ADDRESS PERMUTING, THE
				;INFORMATION USED TO MAKE THE LEFT HALF,
				;CAN ALSO MAKE THE RIGHT HALF, THEREBY
				;CUTTING INFO IN PFTAB IN HALF.
	LDA Z,TEMP1
	EOR I,0F
	CLC 
	ADC I,10
	STA Z,TEMP3		;TEMP3,4=NEW REFLECTED ADDR.
	LDA Z,TEMP1+1
	STA Z,TEMP4
	LDA NY,TEMP2		;GET STAMP
	ORA I,80		;REFLECT IT
	STA NY,TEMP3		;STORE IT IN SECOND HALF
				;NOW BUMP ADDR IN TEMP1 BY 1 IF NOT
				;TO MIDDLE OF SCREEN ELSE BUMP IT BY 10 HEX.
	INC Z,TEMP1
	LDA Z,TEMP1
	AND I,10
	BEQ 20$			;BRANCH IF NOT TO MIDDLE OF SCREEN
	LDA Z,TEMP1
	CLC
	ADC I,10
	STA Z,TEMP1
	LDA I,0
	ADC Z,TEMP1+1
	STA Z,TEMP1+1
20$:	INC Z,TEMP2
	BNE 25$
	INC Z,TEMP2+1
25$:	JMP 10$
100$:
	RTS
	.BYTE CHK3
;
BASE	=8.*32.+PF		;BEGINNING OF COURT IN PLAYFIELD
;
;STAMP DESCRIPTORS
N	=0
C0	=26
C1	=27
C2	=28
C3	=29
C4	=2A
C5	=2B
C6	=2C
C7	=2D
C8	=2E
C9	=2F
C10	=30
C11	=31
C12	=32
C13	=33
C14	=34
C15	=35
C16	=36
C17	=37
C18	=38
C20	=3A
C21	=3B
C22	=3C
C23	=3D
C24	=3E
C25	=3F
C26	=1B
C27	=39
C28	=18
END	=01
PFTAB:			;PLAYFIELD COURT STAMPS
				;1
	.BYTE N,N,N
	.REPT 13.
	.BYTE C6
	.ENDR
				;2
	.BYTE N,N,C1,C0
	.REPT 11.
	.BYTE N
	.ENDR
	.BYTE C20
				;3
	.BYTE N,N,C2
	.REPT 12.
	.BYTE N
	.ENDR
	.BYTE C20
				;4
	.BYTE C18,N,C3
	.REPT 12.
	.BYTE N
	.ENDR
	.BYTE C20
				;5
	.BYTE C18,N,C4
	.REPT 12.
	.BYTE N
	.ENDR
	.BYTE C20
				;6
	.BYTE C18,N,C5
	.REPT 12.
	.BYTE N
	.ENDR
	.BYTE C20
				;7 (TOP LINE OF KEY)
	.BYTE C18,C1,C9,C7,C7,C7,C7,C10,C11,C12
	.REPT 4
	.BYTE N
	.ENDR
	.BYTE C22,C21
				;8
	.BYTE C18,C2
	.REPT 5
	.BYTE N
	.ENDR
	.BYTE C3,N,C13,N,N,N,C24,C23,C20
				;9
	.BYTE N,C3
	.REPT 5
	.BYTE N
	.ENDR
	.BYTE C4,C15,C14,N,N,N,C25,C26,C20
				;10 (LAST ROW OF KEY)
	.BYTE N,C8,C6,C6,C6,C6,C6,C17
	.BYTE C16,N,N,N,N,N,C27,C28
				;11
	.BYTE N,C5
	.REPT 13.
	.BYTE N
	.ENDR
	.BYTE C20
				;12
	.BYTE C1,C0
	.REPT 13.
	.BYTE N
	.ENDR
	.BYTE C20
				;13
	.BYTE C2
	.REPT 14.
	.BYTE N
	.ENDR
	.BYTE C20
				;14
	.BYTE C3
	.REPT 14.
	.BYTE N
	.ENDR
	.BYTE C20
				;15
	.BYTE C4
	.REPT 14.
	.BYTE N
	.ENDR
	.BYTE C20
				;16
	.BYTE C5
	.REPT 14.
	.BYTE N
	.ENDR
	.BYTE C20
				;17
	.REPT 16.
	.BYTE C7
	.ENDR
	.BYTE END
	.LIST MEB
	.PAGE
	.SBTTL	POSIT
	.REPT 0
**************************
*
*	POSIT
*
**************************
	DESCRIPTION:	POSITION STARTED PLAYERS ON THE SCREEN.  CHECK PLAYER
			STATUS - CHANGE TO VISIBLE PLAYERS AS NECESSARY AND
			UPDATE SCREEN POSITION

	REGISTERS:
		IN:	ACC=CONDITION OF COUNTDOWN - MUST BE SAVED
			X,Y DON'T CARE
		OUT:	ACC IS RESTORED; X,Y ARE BLITZED
	.ENDR
POSIT:
	PHA
	LDX I,PN
10$:	LDA ZX,PSTAT
	BMI 50$
	LDA AX,CHPPT		;GET HORIZONTAL JUMP POSITIONS
	STA ZX,CHPHT
	LDA AX,LHPPT
	STA ZX,LHPPH
	LDA AX,RHPPT
	STA ZX,RHPPH
	LDA AX,CVPPT		;GET VERTICAL JUMP POSITIONS
	STA ZX,CVPHT
	STA ZX,RVPPH
	STA ZX,LVPPH
	LDA AX,CPICPT		;GET PICTURES
	STA ZX,CPICP
	LDA AX,RPICPT
	STA ZX,RPICP
	LDA AX,LPICPT
	STA ZX,LPICP
	TXA
	ORA ZX,PSTAT		;SET "FACING LEFT" BIT
	STA ZX,PSTAT
50$:	DEX
	BPL 10$
	PLA
	RTS
				;FOLLOWING TABLE POSITION PLAYER FOR JUMP BALL
				;
CHPPT:				;CENTER HOR. POS. PLAYER TABLE
	.BYTE 6F,8F
LHPPT:				;LEFT HOR.
	.BYTE 67,87
RHPPT:				;RIGHT HOR.
	.BYTE 77,97
CVPPT:				;CENTER VER.
	.BYTE 83,83
CPICPT:				;CENTER PICTURE
	.BYTE 12,92
RPICPT:				;RIGHT PICTURE
	.BYTE 15,90
LPICPT:				;LEFT PICTURE
	.BYTE 10,95
	.PAGE
	.SBTTL	PLAYER-PLAYER COLLISION (2 PLAYER ONLY)
	.REPT 0
*************************
*
*	PPCOL
*
*************************
	DESCRIPTION:	DETECT PLAYER-TO-PLAYER COLLISION
			AND BACK-UP PLAYERS UPON DETECTION-ONLY
			FOR MOVEMENT IN COLLIDING DIRECTION.
			*** MUST BE CALLED AFTER PLAYER
			POSITIONS HAVE BEEN CALCULATED, I.E. AFTER
			"TRAKBL", BUT BEFORE MOTION RAM HAS
			BEEN UPDATED, I.E. BEFORE "UPDATE".
	REGISTERS:
		IN:	DONT CARE
		OUT:	BLITZED
	.ENDR
PPCOL:
	LDA Z,SLEWFG
	BEQ 1$
	RTS			;DISABLE COLLISIONS IF SLEWING
				;STRICTLY 2-PLAYER COLLISION DETECT.
1$:	LDA Z,BALCOD		;DISABLE COLLISIONS IF BALL IS
	BMI 2$			;FREE AND EITHER PLAYER
	LDA Z,PSTAT
	ORA Z,PSTAT+1		;IS A ROBOT
	ASL
	BMI 2$
	RTS
2$:	LDX I,1
5$:	LDA ZX,PSTAT
	BPL 6$
	JMP 50$		;BRANCH IF INVISIBLE
6$:	LDA ZX,CVPPH
	STA Z,TEMP1
	LDA ZX,CHPPH
	STA Z,TEMP1+1
	TXA
	TAY
	DEY
10$:	LDA AY,CVPPH
	SEC
	SBC Z,TEMP1
	BPL 15$
	EOR I,0FF
	CLC
	ADC I,1
15$:	CMP I,3
	BCS 100$		;BRANCH IF NO COLLISION VERTICALLY
	LDA AY,CHPPH
	SEC
	SBC Z,TEMP1+1
	BPL 18$
	EOR I,0FF
	CLC
	ADC I,1
18$:	CMP I,8
	BCS 100$		;BRANCH IF NO COLLISION HORIZONTALLY
				;
				;COLLISION !!!!
				;COLLISION OCCURRED BETWEEN NEW POSITIONS.
				;NOW GO BACK AND FOR EACH OBJECT SEE
				;WHICH DIRECTION CAUSED COLLISION AND DISALLOW
				;MOVEMENT IN THAT DIRECTION. DO THIS BY LOOKING
				;FOR COLLISION USING NEW POSITION(1) AND OLD
				;POSITION(2) UNTIL A COLLISION IS FOUND. THEN 
				;DISALLOW MOTION IN THE DIRECTION
	LDA I,80
	STA A,PCOLFG		;SET FLAG FOR ROBOTS
	LDA I,MORAMH
	STA Z,TEMP1+1
	STA Z,TEMP2+1
	LDX I,1
20$:	TXA
	EOR I,1
	TAY
	LDA AY,CPTRPL
	STA Z,TEMP1
	LDA AY,JMPHGT
	STA Z,TEMP6
	LDY I,1
	LDA NY,TEMP1		;FETCH OLD VPOS OF OTHER PLAYER
	SEC
	SBC Z,TEMP6
	STA Z,TEMP6
	LDA ZX,CVPPH
	SEC
	SBC Z,TEMP6
	BPL 25$
	EOR I,0FF
	CLC
	ADC I,1
25$:	CMP I,6
	BCS 30$			;BRANCH IF VERTICAL SEPARTION IS .GT.8
	LDA ZX,CPTRPL		;ELSE COLLISION OCCURRED SO CLOBBER VERT.
	STA Z,TEMP2
	LDY I,1
	LDA NY,TEMP2		;FETCH OLD VPOS OF CURRENT PLAYER
	SEC
	SBC ZX,JMPHGT
	STA ZX,CVPPH
	STA ZX,CVPHT
30$:	
	LDY I,2
	LDA NY,TEMP1		;FETCH OLD HPOS OF OTHER PLAYER
	SEC
	SBC ZX,CHPPH
	BPL 35$
	EOR I,0FF
	CLC
	ADC I,1
35$:	CMP I,0B
	BCS 40$			;BRANCH IF HORIZONTAL SEPARTATION .GT.0D
	LDA ZX,CPTRPL		;ELSE COLLISION OCCURRED SO CLOBBER HOR.
	STA Z,TEMP1
	LDY I,2
	LDA NY,TEMP1		;FETCH OLD HPOS OF CURRENT PLAYER
	STA ZX,CHPPH
	STA ZX,CHPHT
	JMP 50$
40$:				;ERROR NO COLLISION DETECTED IN EITHER
				;DIRECTION, YET THERE IS SUPPOSED TO BE ONE.
50$:	DEX
	BPL 20$
100$:	
	RTS
	.PAGE
	.SBTTL	PRIORITIZE MOTION OBJECTS
	.REPT 0
************************
*
*	PRTY
*
************************
	DESCRIPTION:	IF TWO MOTION OBJECTS ARE ON TOP OF EACH OTHER THE
			ONE WITH THE HIGHER MOTION NUMBER HAS PRECIDENCE
			OVER THE LOWER NUMBERED OBJECT.  THIS ROUTINE
			DETERMINES WHICH OBJECTS ARE "CLOSEST TO THE FRONT"
			AND ASSIGNS MOTION OBJECT NUMBERS ACCORDINGLY
	REGISTERS:
		IN:	DON'T CARE
		OUT:	BLITZED
	.ENDR
PRTY:
				;FIRST PRIORITIZE OBJECTS IN TEMP1+Y
	LDX I,4
10$:	LDA I,0			;TEMP5=COUNTER OF LOWER PRIORITY OBJECTS
	STA Z,TEMP5
	LDY I,4
20$:	STY Z,TEMP4
	CPX Z,TEMP4
	BEQ 30$
	LDA AY,CVPPH
	CPY I,2
	BEQ 21$
	CPY I,3
	BNE 22$
21$:	SEC
	SBC I,20
22$:	STA Z,TEMP7
	LDA ZX,CVPPH
	CPX I,2
	BEQ 24$
	CPX I,3
	BNE 23$
24$:	SEC
	SBC I,20
23$:	CMP Z,TEMP7
	BNE 25$
	STX Z,TEMP4
	CPY Z,TEMP4
	BCS 30$			;BRANCH IF (Y).GT.(X)
	INC Z,TEMP5		;ELSE COUNT TIMES OBJ(VPOS) ARE EQUAL
	JMP 30$
25$:	BCS 30$			;BRANCH IF OBJ(Y) IS HIGHER IN PRIORITY
				;THAN OBJ(X), I.E. (Y).LT.(X)
	INC Z,TEMP5
30$:	DEY
	BPL 20$
	LDY Z,TEMP5
	TXA
	STA AY,TEMP1		;TEMP1+Y CONTAINS INDEX NUMBER OF OBJECT WITH
				;PRIORITY "Y".  Y=0 IS LOWEST PRIORITY.
				;TEMP1+0=OBJECT WITH LOWEST PRIORITY
	DEX
	BPL 10$
				;
				;SECOND, ASSIGN MOTION POINTERS
				;TO OBJECTS BASED ON PRIORITIES STORED
				;IN TEMP1+0 TO TEMP1+4
	LDA I,0FC
	LDY I,4
40$:	LDX AY,TEMP1
	STA ZX,RPTRPL
	SEC
	SBC I,4
	STA ZX,CPTRPL
	SEC
	SBC I,4
	STA ZX,LPTRPL
	SEC
	SBC I,4
	DEY
	BPL 40$
	RTS

	.SBTTL	RANDOM # GENERATOR
	.REPT 0
************************
*
*	RANDU
*
************************
	DESCRIPTION:	BOXER RANDOM NUMBER GENERATOR
	REGISTERS:
	IN:		DONT CARE
	OUT:		ACC=RANDOM NUMBER
	BASE PAGE USE:	POLY
	STACK USE:	NONE
	.ENDR
RANDU:
	LDA Z,POLY
	BNE 10$
	LDA I,255.
10$:	ASL
	EOR Z,POLY
	ASL
	ASL
	ROL Z,POLY
	LDA Z,POLY
	RTS
	.PAGE
	.SBTTL	REPOSITION PLAYERS AFTER A BASKET
	.REPT 0
*********************
*
*	REPOS
*
*********************
	DESCRIPTION:	REPOSITION PLAYERS AFTER A BASKET.  LOSER GETS
			REBOUND, WINNER GETS FAR SIDE OF COURT (DEFENSE).
			SWISH BASKET TOO.
	REGISTERS:
		IN:	SAVEX=PLAYER WHO SCORED: 0 OR 1 SET UP BY "SCRIT".(IN SAVEX)
			Y=DON'T CARE
		OUT:	BLITZED
	.ENDR
REPOS:
	LDA Z,POSCNT		;POSCNT IS INITIALIZED IN "BBCOL"
	BEQ 50$
	DEC Z,POSCNT
	BNE 60$			;WAIT FOR BALL TO FALL THRU HOOP
	LDA Z,GSTAT
	BMI 10$			;BRANCH IF GAME MODE
	LDA Z,SHTPOS
	CMP I,1
	BNE 20$			;BRANCH IF NOT TIME TO RESET
10$:	LDA I,7
	STA Z,SHTPOS
	LDX Z,SAVEX
	TXA
	CLC
	ADC I,2
	TAY
	JSR ASSIGN
	TXA
	EOR I,1
	TAX
	TAY
	JSR ASSIGN
20$:	LDA Z,SAVEX		;RESTORE NORMAL BASKET PICTURE AFTER SWISH
	EOR I,1
	CLC
	ADC I,2
	TAX			;X=INDEX TO APPROPRIATE BASKET
	CLC
	LDA AX,RESPIC
	BMI 40$
	STA ZX,LPICP
	ADC I,1
	STA ZX,CPICP
	ADC I,1
	STA ZX,RPICP
	RTS
40$:	STA ZX,LPICP
	SEC
	SBC I,1
	STA ZX,CPICP
	SEC
	SBC I,1
	STA ZX,RPICP
50$:	RTS
60$:				;SWISH BASKET WHILE BALL FALLS
	LDA Z,POSCNT
	CMP I,30
	BCS 50$
	CMP I,20
	BCS 70$
	BCC 20$
70$:	LDA Z,SAVEX
	EOR I,1
	CLC
	ADC I,2
	TAX			;X=INDEX TO APPROPRIATE BASKET
	CLC
	LDA AX,SWISHPIC
	BMI 80$
	STA ZX,LPICP
	ADC I,1
	STA ZX,CPICP
	ADC I,1
	STA ZX,RPICP
	RTS
80$:	STA ZX,LPICP
	SEC
	SBC I,1
	STA ZX,CPICP
	SEC
	SBC I,1
	STA ZX,RPICP
	RTS
ASSIGN:
	LDA I,7F
	STA ZX,CVPHT
	LDA AY,REPTAB
	STA ZX,CHPHT
	RTS
REPTAB:
	.BYTE 18,0E0,77,88
SWISHPIC:
	.BYTE 0,0,1F,0A1
RESPIC:
	.BYTE 0,0,1C,9E
	.PAGE
	.SBTTL	RESET
	.REPT 0
*****************************
*
*	RESET
*
*****************************
	DESCRIPTION:	RESET ALL MOTION OBJECTS TO ZERO

	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
	.ENDR
RESET:
	LDX I,3F		;FIRST, CLEAR MOTION RAM
	LDA I,1A
10$:	STA AX,MORAM
	DEX
	BPL 10$
	LDA I,0
	LDX I,66
20$:	STA AX,0000		;SECOND, CLEAR BASE PAGE MOTION TEMPORARIES
	DEX
	BPL 20$
	LDA I,1A
	STA A,MORAM		;SET PIC OF UNUSED OBJ TO BLANK
	RTS
	.PAGE
	.SBTTL	SCORE POINTS
	.REPT 0
*************************
*
*	SCRIT
*
*************************
	DESCRIPTION:	CALLED FROM BBCOL WHEN A BASKET
			HAS BEEN MADE. FIGURE OUT WHO
			SCORED, ADD POINTS AND CALCULATE
			WHO'S LEADING
	STACK USE:	4 BYTES
	BASE PAGE:	TEMP2,TEMP3,SAVEX=PLAYER WHO SCORED
	.ENDR
SCRIT:
	LDA Z,GSTAT
	BPL 100$		;BRANCH IF NOT GAME MODE
	LDA Z,RLHPBL
	CMP I,7F
	BCS 10$		;BRANCH IF ON RIGHT SIDE-SCORE LEFT
	LDX I,1		;ELSE LEFTSIDE-SCORE RIGHT
	BPL 15$
10$:	LDX I,0
15$:	SED
	LDA ZX,SCORE
	CLC
	ADC I,2
	STA ZX,SCORE
	LDA ZX,SCORE+2
	ADC I,0
	STA ZX,SCORE+2
	CLD
	TXA
	STA Z,SAVEX		;SAVE WHO SCORED FOR REPOS
				;UPDATE LEADER
	LDX I,0
	LDA ZX,SCORE+2		;FIRST CHECK HIGH DIGIT
	CMP ZX,SCORE+3
	BEQ 50$
	BCS 70$
	INX
	BPL 70$
50$:	LDA ZX,SCORE		;SECOND CHECK LOW DIGITS
	CMP ZX,SCORE+1
	BEQ 100$
	BCS 70$
	INX
70$:	STX Z,LEADER
100$:
	RTS
	.PAGE
	.SBTTL	SLEW
	.REPT 0
*************************
*
*	SLEW
*
*************************
	DESCRIPTION:	SLEW PLAYERS FROM PLACE TO PLACE

	INPUT:		SLEWFG: D7=1= SLEW PLAYER IN D0 TO CORNER (SET BY
			"BNDCHK" WHEN BALL GOES OUT OF BOUNDS).

	OUTPUT:		FLAG BITS CLEARED WHEN PLAYER REACHES CORRECT POS.
			OVRDFG IS SET SO "TRAKBL" KNOWS TO OVERRIDE WITH SLEW
			MOVEMENT.  PUTERV, PUTERH ARE LOADED WITH APPROPRIATE
			VALUES SO "TRAKBL" KNOWS WHAT TO ADD.
	.ENDR
SLEW:
	BIT Z,SLEWFG
	BMI 10$
	JMP SLEW2
10$:	LDA Z,SLEWFG
	AND I,1
	TAX			;GET PLAYER TO BE SLEWED
	LDA Z,BALCOD
	BMI 25$			;BRANCH IF ALREADY HAVE BALL
12$:	LDA ZX,CHPPH		; SEE IF IN CORRECT POSITION
	LSR
	SEC
	SBC AX,CORNSH
	BPL 15$
	EOR I,0FF
	CLC
	ADC I,1
15$:	STA Z,TEMP1
	CMP I,10
	LDA ZX,CVPPH
	LSR
	SEC
	SBC AX,CORNSV
	BPL 20$
	EOR I,0FF
	CLC
	ADC I,1
20$:	STA Z,TEMP1+1
	CMP I,4
	BCS 30$
	LDA Z,TEMP1
	CMP I,4
	BCS 30$
	LDA Z,SLEWFG
	AND I,7E
	STA Z,SLEWFG
	BPL 26$
25$:	LDA I,0
	STA Z,SLEWFG
26$:	LDA I,0
	STA ZX,OVRDFG
	BEQ SLEW2		;BRA TO BALL SLEW
30$:				;MOVE TO DESIRED LOCATION
				;CALCULATE RATE COUNTERS, INIT STUFF FOR TRAKBL
	LDA I,0F8
	STA AX,PUTERV
	CPX I,0
	BNE 33$
	LDA I,0F8
	BMI 34$
33$:	LDA I,8
34$:	STA AX,PUTERH
	TXA
	PHA
	JSR BADIVD		;TEMP1, TEMP1+1 HAVE BEEN LOADED
	PLA
	TAX
	LDA Z,TEMP1
	STA ZX,VPLSAV
	LDA Z,TEMP1+1
	STA ZX,HPLSAV
100$:
	JSR CNTIT		;COUNT-DOWN THE RATE COUNTER
SLEW2:
	BIT Z,SLEWFG
	BVC 25$
	LDA A,BALREP
	BEQ 20$
	DEC A,BALREP		;COUNT-DOWN BALL REPOS TIMER
	BNE 25$
20$:	LDA Z,SLEWFG
	AND I,0BF
	STA Z,SLEWFG
	LDA I,20
	STA Z,BNCHGT		;START A BOUNCE
	LDA I,4
	STA Z,INTVEL
	LDA Z,BALDES
	STA Z,VFLRBL
	LDA I,1B		;RESTORE BALL PICTURE
	STA Z,BPIC
	LDA Z,BALOFF
	STA Z,RLHPBL
25$:	RTS
CNTIT:	LDA ZX,HPLCNT
	BNE 50$
	LDA ZX,HPLSAV
	STA ZX,HPLCNT
50$:	DEC ZX,HPLCNT
	BNE 60$
	LDA ZX,OVRDFG
	ORA I,80
	STA ZX,OVRDFG		;SET OVERRIDE FLAG SO TRAKBL WILL ADD IN PUTERH
	BMI 65$			;BRA
60$:	LDA ZX,OVRDFG
	AND I,7F
	STA ZX,OVRDFG
65$:	LDA ZX,VPLCNT
	BNE 70$
	LDA ZX,VPLSAV
	STA ZX,VPLCNT
70$:	DEC ZX,VPLCNT
	BNE 80$
	LDA ZX,OVRDFG
	ORA I,40
	STA ZX,OVRDFG
	RTS
80$:	LDA ZX,OVRDFG
	AND I,0BF
	STA ZX,OVRDFG
85$:
	RTS
CORNSH:	.BYTE 08,74
CORNSV:	.BYTE 20,20
	.PAGE
	.SBTTL	SOUNDS
	.REPT 0
*********************
*
*	SOUND
*
*********************
	DESCRIPTION:	SCAN SOUND FLAGS AND INITIATE/UPDATE SOUNDS
			AS NECESSARY.
			FLAGS:
			DSNDFG:	DRIBBLE SOUND FLAG
				D7=1 WHEN BALL HITS FLOOR
				D4=  PREVIOUS CONDITION OF DRIBBLE SOUND.
				     D4 OF DRIBBLE SOUND BYTE MUST BE CHANGED
				     FROM ITS PREVIOUS STATE TO MAKE ITS SOUND.
	.ENDR
SOUND:
				;SLAM SWITCH AUDIO
	LDY Z,MSNDFG
	BNE 20$			;SKIP SLAM IF PLAYING SWEET GEORGE
	LDY Z,GSTAT
	BMI 20$			;SKIP SLAM IF ANYTHING BUT ATTRACT
	LDA A,$LAM
	AND I,$LMBIT
	BNE 15$			;BRANCH IF SLAM SWITCH IS OPEN
	LDA I,0D0
	STA A,SOUND2
	BMI 20$			;BRA
15$:	LDA I,0FF
	STA A,SOUND2		;MAKE SURE SLAM SOUND IS OFF
20$:
				;DRIBBLE SOUND
	LDA Z,GSTAT
	BMI 30$			;BRANCH IF GAME MODE
	RTS
30$:	LDA Z,FREFLG
	BNE 40$			;SKIP DRIBBLE IN FRE
	LDA Z,DSNDFG
	BPL 40$			;BRANCH IF FLAG BIT IS NOT SET
	AND I,7F
	STA A,SOUND1
	EOR I,10		;FLIP DRIBBLE SOUND BIT FOR NEXT TIME
	STA Z,DSNDFG
40$:				;CROWD SOUND
	LDY Z,CSNDFG
	BEQ 60$
	LDA Z,DSNDFG		;STRIP OUT LOUDNESS BITS, AND
	AND I,10		;MAINTAIN DRIBBLE BIT AND
	ORA AY,LOUDNES		;OR IN NEW LOUDNESS
	STA A,SOUND1
	STA Z,DSNDFG
	LDA Z,FRAME
	AND I,3
	BNE 60$
	DEC Z,CSNDFG
60$:				;PLAY MUSIC
	LDY Z,MSNDFG
	LDA Z,FREFLG
	BEQ 65$
	LDA A,FRETIM
	CMP I,0A0
	BCS 80$			;BRANCH IF BUZZER STILL ON (FREEZE MODE)
	CPY I,1			;ELSE PLAY ENDING MUSIC
	JMP 66$
65$:	CPY I,6C
66$:	BCS 70$
	LDA I,0
	STA Z,MSNDFG
	BEQ 80$			;BRANCH IF NO MUSIC IS SELECTED
70$:	DEC Z,LENGTH
	BNE 80$			;BRANCH IF STILL PLAYING LAST NOTE
	LDA I,06		;SPECIFY DURATION OF NEW NOTE
	STA Z,LENGTH
	LDA AY,NOTES		;GET NEXT NOTE FROM TABLE
	STA A,SOUND2
	DEC Z,MSNDFG
80$:
				;END-OF-GAME BUZZER
	LDA Z,FREFLG
	BEQ 85$			;BRANCH IF NOT FREEZE MODE
	LDA A,FRETIM
	CMP I,0A0
	BCC 85$			;BRANCH IF SOUND HAS BEEN ON FOR 2 SECONDS
	LDA I,10
	EOR Z,DSNDFG
	STA Z,DSNDFG		;TOGGLE DRIBBLE SOUND
	STA A,SOUND1
85$:
				;30-SECOND WARNING
	LDA Z,WSNDFG
	BEQ 90$
	DEC Z,WSNDFG
	BEQ 88$
	LDA Z,WSNDFG
	AND I,8
	BNE 88$
	LDA I,0C0
	STA A,SOUND2
	BMI 90$			;BRA
88$:	LDA I,0FF
	STA A,SOUND2
90$:
	RTS
				;
LOUDNES:			;CROWD LOUDNESS
	.BYTE 2,2,1,1
	.BYTE 2,2,2,3
	.BYTE 3,4,4,4
	.BYTE 5,6,6,6
	.BYTE 7,8,8,7
	.BYTE 8,8,9,0A
	.BYTE 0A,8,8,9
	.BYTE 9,9,9,0A
	.BYTE 0C,0C,0B,0A
	.BYTE 08,0C,0C,0C
	.BYTE 0D,0D,0C,0E
	.BYTE 0D,0D,0D,0F
	.BYTE 0D,0E,0E,0E
	.BYTE 0F,0F,0F,0C
	.BYTE 0F,0F,0F,0E
	.BYTE 0E,0C,0B,08
;
;
;
;
;
;
NOTES:			;NOTES FOR MUSIC CIRCUIT
				;SWEET GEORGIA BROWN
				;COURTESY OF DAN PLISKIN
	.BYTE 0FF,0FF,0FF,60,80,78,76,0FF	;9TH BAR
;
	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,0FF,60
	.BYTE 0FF,80,79,0FF,93,0FF,70,80	;8TH BAR
;
	.BYTE 0FF,80,93,0FF,0A0,0AB,0FF,0A0
	.BYTE 0FF,0FF,99,93,0FF,80,0FF,60	;7TH BAR
;
	.BYTE 0FF,0FF,0FF,80,80,99,0FF,0AB
	.BYTE 80,80,0FF,93,80,0FF,93,0FF	;6TH BAR
;
	.BYTE 0FF,0FF,0FF,80,80,54,0FF,70
	.BYTE 0FF,80,0FF,80,0FF,80,80,0FF	;5TH BAR
;
	.BYTE 0FF,0FF,0FF,0FF,0FF,0FF,70,70
	.BYTE 70,80,0FF,8F,0FF,0A0,0A0,0A0	;4 TH BAR
;
	.BYTE 0FF,80,80,8F,0FF,60,0FF,81
	.BYTE 0FF,41,0FF,60,0FF,54,0FF,41	;3 RD BAR
;
	.BYTE 0FF,41,0FF,0FF
	.BYTE 0FF,0FF,41,41	
	.BYTE 41,68,0FF,80
	.BYTE 0FF,0A0,0A0,0A0		;2ND BAR
	.BYTE 0FF,80,80,8F
	.BYTE 0FF,68,0FF,80
	.BYTE 0FF,41,0FF,68
	.BYTE 0FF,54,0FF,41		;1 ST BAR
				;
				;
CLRSND:				;TURN OFF ALL SOUNDS
	LDA I,0
	STA Z,DSNDFG
	STA A,SOUND1
	LDA I,0FF
	STA A,SOUND2
	RTS
	.PAGE
	.SBTTL	TEAMS
	.REPT 0
*************************
*
*	TEAMS
*
*************************
	DESCRIPTION:	ASSIGN COLOR DESCRIPTOR BYTES FOR EACH MOTION OBJECT.
			THIS INFORMATION IS USED TO DETERMINE PLAYER AND UNIFORM
			COLORS.
			THE COLOR DESCRIPTOR BYTE (REFERRED TO AS THE CCW OR COLOR
			CONTROL WORD IN MORGAN'S HARDWARE DESCRIPTION) WORKS AS
			FOLLOWS:
			AREA 1 (BIT 0,1): SPECIFY COLOR OF AREAS WHERE A "1"
					  IS FOUND IN THE BODY ROM (MASK 0) ONLY
			AREA 2 (BIT 2,3): COLOR OF AREAS IN THE JERSEY ROM (MASK 1)
					  ONLY
			AREA 3 (BIT 4,5): COLOR OF AREAS WHERE A "1" IS FOUND IN
					  BOTH
				IF NOTHING IS SPECIFIED, BACKGROUND
				GRAY IS ASSUMED
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
BLK	=0			;NUMBER STORED TO OBTAIN BLACK IN ABOVE DEFINED AREAS
DG	=1			;	"	"	"DARK GRAY 
LG	=2			;	"	"	"LIGHT GRAY (BACKGROUND)
WH	=3			;NUMBER STORED TO OBTAIN WHITE
				;
				;
	.ENDR
TEAMS:
	LDX I,3
10$:	LDA AX,COLORT
	STA ZX,CDP
	STA ZX,RDP
	STA ZX,LDP
	DEX
	BPL 10$
				;THEN COLOR AND PICTURE THE BALL
	LDA I,1B
	STA Z,BPIC
	LDA I,0C			;MAKE AREA 1 = LT. GRAY
	STA Z,BALD
	RTS
COLORT:
	.BYTE 03,32,2C,2C	;BLK/WHITE TEAMS, 2 GRAY PLAYERS
	.PAGE
	.PAGE
	.SBTTL	UPDATE MOTION RAM
	.REPT 0
************************
*
*	UPDATE
*
************************
	DESCRIPTION:	TRANSFER NEWLY CALCULATED MOTION OBJECT POSITIONS
			FROM BASE PAGE TO ACTUAL MOTION OBJECT RAM.  THIS IS
			DONE DURING VBLANK TO AVOID "TEARING".
	REGISTERS:
		IN:	DON'T CARE
		OUT:	ALL BLITZED
	.ENDR
	.BYTE CHK4
UPDATE:
5$:	LDA I,MORAMH
	STA Z,TEMP1+1		;TEMP1=MOTION RAM LOCATION
	LDX I,3
10$:	LDA ZX,PSTAT
	BMI 15$			;BRANCH IF INVISIBLE
	LDY I,0			;FIRST, DO CENTER MOTION PIECE
	LDA ZX,CPTRPL
	STA Z,TEMP1
	LDA ZX,CPICP
	STA NY,TEMP1
	INY
	LDA ZX,CVPPH
	CLC
	ADC ZX,JMPHGT
	STA NY,TEMP1
	INY
	LDA ZX,CHPPH
	STA NY,TEMP1
	INY
	LDA ZX,CDP
	STA NY,TEMP1
15$:	DEX
	BPL 10$
				;SECOND, DO RIGHT MOTION PIECE
	LDX I,3
20$:	LDA ZX,PSTAT
	BMI 25$			;BRANCH IF INVISIBLE
	LDY I,0
	LDA ZX,RPTRPL
	STA Z,TEMP1
	LDA ZX,RPICP
	STA NY,TEMP1
	INY
	LDA ZX,RVPPH
	CLC
	ADC ZX,JMPHGT
	STA NY,TEMP1
	INY
	LDA ZX,RHPPH
	STA NY,TEMP1
	INY
	LDA ZX,RDP
	STA NY,TEMP1
25$:	DEX
	BPL 20$
				;THIRD, DO LEFT MOTION PIECE
	LDX I,3
30$:	LDA ZX,PSTAT
	BMI 35$
	LDY I,0
	LDA ZX,LPTRPL
	STA Z,TEMP1
	LDA ZX,LPICP
	STA NY,TEMP1
	INY
	LDA ZX,LVPPH
	CLC
	ADC ZX,JMPHGT
	STA NY,TEMP1
	INY
	LDA ZX,LHPPH
	STA NY,TEMP1
	INY
	LDA ZX,LDP
	STA NY,TEMP1
35$:	DEX
	BPL 30$
				;FOURTH, DO THE BALL
	LDA Z,BPTRL
	STA Z,TEMP1
	LDY I,0
	LDA Z,BPIC
	STA NY,TEMP1
	INY
	LDA Z,VPOSBL
	STA NY,TEMP1
	INY
	LDA Z,RLHPBL
	STA NY,TEMP1
	INY
	LDA Z,BALD
	STA NY,TEMP1
	LDA I,MORAMH		;CLEAR THE TWO DUMMY MOTION WINDOWS
	STA Z,TEMP2+1
	LDA Z,RBPTR
	STA Z,TEMP2
	LDA Z,LBPTR
	STA Z,TEMP1
	LDY I,0
	LDA I,1A
	STA NY,TEMP1
	STA NY,TEMP2
	INY
	LDA I,0FF
	STA NY,TEMP1
	STA NY,TEMP2
	INY
	STA NY,TEMP1
	STA NY,TEMP2
	INY
	LDA I,55
	STA NY,TEMP1
	STA NY,TEMP2
	RTS
	.PAGE
	.SBTTL XFER TRACKBALL READINGS
	.REPT 0
*************************
*
*	XFER
*
*************************
	DESCRIPTION:	TRANSFER TRACKBALL READINGS FROM INTERRUPT
			TEMPS TO VBLANK TEMPS.
	EXPLANATION:	TRACKBALL READINGS START OUT IN TBHD,TBVD. ORIGINALLY
			THEY WERE TRANSFERED TO CHPPH, CVPPH EACH INTERRUPT.
			THIS REQUIRED PPCOL, KEEPUP, AND PRTY TO BE DONE
			DURING VBLANK SINCE VBLANK STARTS WITH AN
			INTERRUPT, CAUSING UPDATE TO GET DIFFERENT VALUES
			IN CVPPH, CHPPH THAN THOSE USED IN PPCOL, KEEPUP,
			AND PRTY IF THEY WERE DONE ELSEWHERE. ANYWAY,
			WITH ALL THAT PROCESSING IN VBLANK, ALOT OF PROCESSING
			OVERLAPS ACTIVE VIDEO CAUSING TEARING AT THE TOP OF
			THE SCREEN.
			
			TO SOLVE THIS PROBLEM, PPCOL, KEEPUP, AND PRTY
			MUST BE MOVED OUT OF VBLANK AND AT THE
			SAME TIME PPCOL, KEEPUP, PRTY AND UPDATE MUST ALL
			SEE THE SAME VALUES IN CVPPH, CHPPH. THIS IS
			ACCOMPLISHED BY HAVING TBHD, TBVD TRANSFERRED TO
			INTERMEDIATE TEMPORARIES CVPHT,CHPHT AND THEN HAVE
			XFER TRANSFER THESE VALUES TO CVPPH, CHPPH JUST
			BEFORE CALLING PPCOL, KEEPUP AND PRTY IN THE MAIN LOOP.
	REGISTERS:
		IN:	DONT CARE
		OUT:	BLITZED
	.ENDR
XFER:	
	LDX I,PN
10$:	LDA ZX,CHPHT
	STA ZX,CHPPH
	LDA ZX,CVPHT
	STA ZX,CVPPH
	DEX
	BPL 10$
	RTS
	.SBTTL MESSAGE OUTPUT ROUTINES
	.REPT 0
*************************
*
*	MESS ETC.
*
*************************
	DESCRIPTION:
		EACH LANGUAGE HAS 10 MESSAGES. EACH MESSAGE REQUIRES
		A 2-BYTE POINTER SPECIFYING WHERE IN MEMORY THE
		TEXT STARTS. THUS EACH LANGUAGE HAS A TABLE OF 10X2=
		20 BYTES. THEREFORE TO GET THE POINTER TO A PARTICULAR
		MESSAGE TEXT, TAKE THE LANGUAGE OPTION AND MULTIPLY
		BY 20 TO GET TO THE BEGINNING OF THE TEXT POINTERS
		FOR THE LANGUAGE, THEN ADD IN THE OFFSET (PASSED TO MESS IN X) FOR
		THE THE PARTICULAR MESSAGE YOU WANT.
	REGISTERS:
		IN:	ACC=INDEX TO P.F. ADDRESS TABLE (MPOINT)
			X=OFFSET TO MESSAGE FROM BEGINNING OF LANGUAGE IN MESSPT
		OUT:	ALL BLITZED
	STACK USE:	2 BYTES
	BASE PAGE USE:	LOTS-DONT USE TEMP1
	.ENDR
;
MESS:
	TAY				;PF ADDR INDEX
	LDA 	AY,MPOINT
	STA	Z,TEMP2			;GET PF ADDR
	LDA	AY,MPOINT+1
	STA	Z,TEMP2+1
MESS2:	LDA	A,OPTSW		;GET LANGUAGE
	EOR I,0FF
	ROL			;LANG IS IN D7,D6
	ROL			;PUT THEM IN D1,D0
	ROL
	AND	I,3
	PHA
					;SAVE VALUE FOR LATTER
	STX	Z,TEMP3			;SAVE PTR TO ONE OF 7 POSSIBLE MESSAGES
	ASL
	ASL
	ASL				;ALL THIS MULTIPLIES OPTION
	ASL				;BY 14 SINCE THERE ARE 7 MESSAGES
	STA Z,TEMP5
	PLA
	ASL
	EOR I,0FF
	CLC
	ADC I,1
	CLC
	ADC Z,TEMP5
	CLC
	ADC	Z,TEMP3
	TAX				;SET MESSAGE PTR
					;X POINTS AT TABLE ENTRY
	LDA	AX,MESSPT
	STA	Z,TEMP3
	LDA	AX,MESSPT+1		;SET MESSAGE POINTER
	STA	Z,TEMP3+1
	LDY	I,0			;MESSAGE INDEX
10$:	LDA	NY,TEMP3		;GET NEXT OUTPUT CHARACTER
	BEQ	40$			;ZERO BYTE MEANS DONE
20$:
	CMP I,20
	BNE 30$
	LDA I,0		;0=BLANK CHAR
	BPL 35$
30$:	SEC
	SBC I,40		;CONVERT  ASCII TO PROM
	BPL 35$
	CLC
	ADC I,2C		;CONVERT BACK FOR NUMBERS
35$:
	LDX Z,WHTEFG
	BEQ 38$
	ORA I,40			;MAKE CHARACTER WHITE
38$:	STA	NY,TEMP2		;PUT CHAR INTO FIELD
	INY
	JMP	10$
40$:	RTS
	.PAGE
	.SBTTL	OUTPUT SCORE
	.REPT 0
********************************
*
*	SCROUT
*
********************************
	DESCRIPTION:	OUTPUT THE WORD "SCORE" AND DIGITS
	REGISTERS:
		IN:	Y= DON'T CARE
		OUT:	X= PLAYER NUMBER
			Y= BLITZED
	STACK USE:	NONE
	BASE PAGE USE:	TEMP3,TEMP2
	.ENDR
SCROUT:
	LDX I,1
5$:	LDA AX,WSCADL		;GET LOC. OF THE WORD "SCORE"
	STA Z,TEMP2
	LDA I,PF&0FF00/100
	STA Z,TEMP2+1
	TXA
	PHA
	BEQ 10$
	LDA I,1
	STA Z,WHTEFG
10$:	LDX I,8
	JSR MESS2		;OUTPUT "SCORE"
	LDA I,0
	STA Z,WHTEFG
	PLA
	TAX
	LDY AX,SCADDL		;GET LOC. OF DIGITS
	STY Z,TEMP3
	LDY I,PF&0FF00/100
	STY Z,TEMP3+1
;
;FLASH LEADERS SCORE
;
	LDY I,0
	CPX	Z,LEADER
	BNE	40$			;NOT THE LEADER
	LDA Z,FRAME
	AND I,8
	BEQ	40$			;PUT UP SCORE
	LDA	I,0E4			;E4+1C=0=BLANK CHAR
	JSR	ASC100			;BLANK 1ST DIGIT
	LDA	I,0E4
	JSR	ASC100			;BLANK 2ND
	LDA	I,0E4
	JSR	ASC100			;BLANK 3RD
	JMP 50$
40$:
	LDA	ZX,SCORE+2		;GET HIGH CHAR
	JSR	ASCSTR			;GO PUT IT ON THE FIELD
	LDA	ZX,SCORE
	LSR
	LSR
	LSR				;MIDDLE DIGIT
	LSR
	JSR	ASCSTR
	LDA	ZX,SCORE		;LOW DIGIT
	JSR ASCSTR
50$:
	DEX
	BPL 5$
	RTS
;
;FORMAT ASCII FOR OUTPUT
;
ASCSTR:	AND	I,0F
	CPX I,0
	BEQ ASC100
	ORA I,40		;IF X=1, MAKE SCORE WHITE
ASC100:
	CLC
	ADC I,1C
	STA NY,TEMP3
	INC Z,TEMP3
	RTS
	.PAGE
	.SBTTL	OUTPUT TIME
	.REPT 0
*************************
*
*	TIMOUT
*
*************************
	DESCRIPTION:	OUTPUT 2 DIGITS OF MINUTES, A COLON,
			AND 2 DIGITS OF SECONDS
	REGISTERS:
		IN:	DONT CARE
		OUT:	BLITZED
	.ENDR
COLON	=11
TIMADR	=2*32.+13.+PF
	;
	;
TIMOUT:
	LDA I,TIMADR&0FF
	STA Z,TEMP1
	LDA I,TIMADR&0FF00/100
	STA Z,TEMP1+1
	LDX I,1
	LDY I,1
10$:	LDA ZX,GTIME+1
	PHA
	AND I,0F
	CLC
	ADC I,1C
	STA NY,TEMP1
	DEY
	PLA
	LSR
	LSR
	LSR
	LSR
	CLC
	ADC I,1C
	STA NY,TEMP1
	LDY I,4
	DEX
	BPL 10$
	LDA I,COLON
	LDY I,2
	STA NY,TEMP1
	RTS
	.PAGE
	.SBTTL 	OUTPUT PRESS START
	.REPT 0
*************************
*
*	STRTOUT
*
************************
	DESCRIPTION:	OUTPUT "PRESS START"
	.ENDR
STRTOUT:
	LDA A,OPTSW
	EOR I,0FF
	ROL			;LANG=D7,D6
	ROL			;PUT THEM IN D1,D0
	ROL
	AND I,3
	TAY
	LDA AY,PSATAB
	LDX I,2
	JSR MESS
	RTS
PSATAB:				;PRESS START ADDR. TABLE
	.BYTE 6,2,4,0
	;
	;
	;
	.SBTTL 	OUTPUT BLANK LINE
	.REPT 0
************************
*
*	BKSTRT
*
************************
	DESCRIPTION:	OUTPUT A BLANK LINE OVER "PRESS START"
	.ENDR
BKSTRT:
	LDA I,6
	LDX I,0
	JSR MESS
	RTS
BKOVR:				;BLANK GAMEOVER
	LDA I,14
	LDX I,0
	JSR MESS
	RTS
;
	.SBTTL	OUTPUT "ADD-A-COIN"
	.REPT 0
********************
*
*	ADDOUT
*
********************
	DESCRIPTION:	OUTPUT "ADD-A-COIN" MESSAGE
	.ENDR
ADDOUT:
	LDA I,8			;PF ADDR IN MPOINT
	LDX I,4			;OFFSET TO MESS FROM BEGINNING OF LANG IN MESSPT
	LDY I,1
	STY Z,WHTEFG
	JSR MESS
	LDA I,16
	LDX I,0A
	JSR MESS
	LDA I,0
	STA Z,WHTEFG
	RTS
	.SBTTL	OUTPUT BLANK LINE
	.REPT 0
*************************
*
*	BADOUT
*
*************************
	DESCRIPTION:	BLANKOUT ADD-A-COIN MESSAGE
	.ENDR
BADOUT:
	LDA I,8
	LDX I,0
	JSR MESS
	LDA I,14
	LDX I,0
	JSR MESS
	RTS
	.SBTTL	 OUTPUT GAME OVER
	.REPT 0
***************************
*
*	OVROUT
*
***************************
	DESCRIPTION:	OUTPUT "GAME OVER"
	.ENDR
OVROUT:
	LDA I,12
	LDX I,6
	JSR MESS
	RTS
	.SBTTL	OUTPUT 2 COIN MIN
	.REPT 0
************************
*
*	TWOUT
*
************************
	DESCRIPTION:	OUTPUT "2 COIN MINIMUM" MESSAGE - DURING CREDIT
	.ENDR
TWOUT:
	LDA A,OPTSW
	EOR I,0FF
	ROL
	ROL
	ROL
	AND I,3
	TAY
	LDA AY,TMBTAB
	LDX I,0C
	JSR MESS
	RTS
TMBTAB:
	.BYTE 1A,18,1A,18
TWOUT2:			;SAME MESSAGE, DIFFERENT PLACE - DURING ATTR
	LDA A,OPTSW
	EOR I,0FF
	ROL
	ROL
	ROL
	AND I,3
	TAY
	LDA AY,TMATAB
	LDX I,0C
	JSR MESS
	RTS
TMATAB:
	.BYTE 10,0E,0C,0A
;
	.SBTTL	TABLES AND MESSAGES
;
;
;TABLE OF PLAYFIELD ADDRESS FOR THE SCORE
;
SCADDL: .BYTE 0AA,0B2
;
;TABLE 0F ADDRS. FOR "SCORE"
;
WSCADL:	.BYTE	89,91
;

;
;TABLE OF ADDRESSES FOR MESSAGES
;
MPOINT:
	.WORD 10.*32.+11.+PF		;0 ENGLISH "PRESS START"
	.WORD 10.*32.+6.+PF		;2 FRENCH
	.WORD 10.*32.+9.+PF		;4 SPANISH
	.WORD 10.*32.+5.+PF		;6 GERMAN
	.WORD 6.*32.+5.+PF		;8 ENGLISH,SP.,FR.,GER. "ADDACOIN"
	.WORD 6.*32.+8.+PF		;A ENGLISH 2 COIN MIN (ATTR)
	.WORD 6.*32.+7.+PF		;C SPANISH
	.WORD 6.*32.+8.+PF		;E FRENCH
	.WORD 6.*32.+6.+PF		;10 GERMAN
	.WORD 7.*32.+11.+PF		;12 GAME OVER
	.WORD 7.*32.+5.+PF		;14 BLANK GAME OVER-ALL LANGS
	.WORD 7.*32.+6+PF		;16 2ND LINE OF ADACOIN
	.WORD 10.*32.+9+PF		;18 2 COIN/CREDIT
	.WORD 10.*32.+6+PF		;1A 2 COIN/CREDIT MODE
MESSPT:
				;GERMAN
	.WORD MES2
	.WORD MES7
	.WORD MES8
	.WORD MES16
	.WORD MES18
	.WORD MES21
	.WORD MES25
				;FRENCH
	.WORD MES2
	.WORD MES5
	.WORD MES4
	.WORD MES14
	.WORD MES17
	.WORD MES22
	.WORD MES26
				;SPANISH
	.WORD MES2
	.WORD MES6
	.WORD MES3
	.WORD MES15
	.WORD MES28
	.WORD MES23
	.WORD MES27
				;ENGLISH
	.WORD MES2		;0 BLANK LINE
	.WORD MES0		;2 PRESS START
	.WORD MES1		;4 ADDACOIN
	.WORD MES13		;6 GAME OVER
	.WORD MES17		;8 SCORE
	.WORD MES20		;A REST OF ADD A COIN
	.WORD MES24		;C "2 COIN MIN"
;IN THE FOLLOWING MESSAGES A "Q" IS EQUIVALENT TO A ":" SINCE THE CHAR PROM
;CONTAINS A COLON INSTEAD OF A Q.
MES0:	.ASCIZ	/PRESS START/
MES1:	.ASCIZ / ADD COINS FOR MORE TIME/
MES20:
MES21:
MES2:	.ASCIZ	/                         /
MES3:	.ASCIZ	/DEPOSITA OTRA MONEDA/
MES4:	.ASCIZ	/DEPOSEZ DE AUTRES PIECES/
MES5:	.ASCIZ	/APPUYER SUR STARTS/
MES6:	.ASCIZ	/ PULSAR START/
MES7:	.ASCIZ	/ STARTKNOEPFE DRUECKEN/
MES8:	.ASCIZ	/WEITER MUENZEN EINWERFEN/
MES13:	.ASCIZ	/GAME OVER/
MES14:	.ASCIZ	/FIN DE PARTIE/
MES15:	.ASCIZ	/JUEGO TERMINADO/
MES16:	.ASCIZ	/SPIELENDE/
MES17:	.ASCIZ	/SCORE/
MES18:	.ASCIZ	/ZAELER/
MES19:	.ASCIZ	/ROBOT/
MES22:	.ASCIZ /POUR PLUS DE TEMPS/
MES23:	.ASCIZ /PARA MAS TIEMPO/
MES24:	.ASCIZ /2 COIN MINIMUM/
MES25:	.ASCIZ /MINDESTENS 2 MUENZEN/
MES26:	.ASCIZ /2 PIECE MINIMUM/
MES27:	.ASCIZ /DOS MONEDAS MINIMO/
MES28:	.ASCIZ /PUNTAJE/				;
				;
				;
	.PAGE
	.SBTTL TRACKBALL MOVEMENT
	.REPT 0
*******************************
*
*	TRAKBL
*
*******************************
	DESCRIPTION:	THE INTERRUPT ROUTINE SCANS THE PHYSICAL TRACKBALL
			COUNTERS AND CONVERTS THE RAW INFORMATION INTO
			"TRACKBALL HORIZONTAL DISPLACEMENT" (TBHD) AND
			"TRACKBALL VERTICAL DISPLACEMENT" (TBVD). THIS
			ROUTINE, TRAKBL, TAKES THESE DISPLACEMENTS, SCALES
			THEM, ADDS THEM TO CURRENT VERTICAL, HORIZONTAL
			POSITION AND THEN ZEROS THEM.
			TRAKBL IS ALSO CALLED
			FROM INTERRUPT ROUTINE,
			SO TBVD, TBHD DON'T GET TOO BIG.
	REGISTERS:
		IN:	DON'T CARE
		OUT:	BLITZED
	BASE PAGE:	LOTS
	.ENDR
	.BYTE CHK5
TRAKBL:
	LDA Z,FREFLG
	BNE 3$			;BRANCH IF FREEZE MODE
	BIT Z,SLEWFG
	BPL 4$
	JSR SLEWIT
4$:	LDA Z,GSTAT
	BMI 6$			;BRANCH IF GAME MODE
	RTS
6$:	LDX I,PN
1$:
	LDA ZX,PSTAT
	ASL
	BPL 3$			;BRANCH IF ROBOT
	LDA ZX,JMPHGT
	BNE 3$			;BRANCH IF JUMPING
	BIT Z,BALCOD
	BVC 2$			;BRANCH IF BALL IS NOT BEING SHOT
	LDA Z,BALCOD
	AND I,3
	STA Z,ITEMP
	CPX Z,ITEMP
	BEQ 3$			;BRANCH IF PLAYER IS SHOOTING
2$:	LDA ZX,PSTAT
	BPL 5$			;BRANCH IF VISIBLE
3$:	JMP 100$
5$:	AND I,0FD		;CLEAR "MOVING BIT"
	STA ZX,PSTAT
	LDA ZX,TBHD
	ORA ZX,TBVD
	BEQ 10$
	LDA ZX,PSTAT
	ORA I,2
	STA ZX,PSTAT
10$:	LDA ZX,TBHD		;8-BIT SIGNED NUMBER
	BEQ 14$			;BRANCH IF THERE IS NO HOR. CHANGE
	PHA			;ELSE UPDATE LEFT/RIGHT BIT IN STATUS BYTE
	LDA ZX,PSTAT
	AND I,0FE		;CLEAR L/R BIT
	STA ZX,PSTAT
	PLA 
	ROL
	ROL			;PUT TBHD SIGN BIT IN D0 - PSTAT'S L/R BIT
	AND I,1
	ORA ZX,PSTAT
	STA ZX,PSTAT
			;
			;
14$:			;FIRST DO HORIZONTAL
	LDA ZX,TBHD
				;*** BEGIN SPEED LIMIT
	BPL 20$
	CMP I,NEGLIM-1
	BCS 30$
	LDA I,NEGLIM
	BMI 30$			;BRA
20$:	CMP I,POSLIM
	BCC 30$
	LDA I,POSLIM
30$:				;*** END SPEED LIMIT
	TAY			;*** APPLY DRIBBLER SPEED LIMIT
	LDA Z,BALCOD
	BPL 36$
	AND I,1
	STA Z,ITEMP
	CPX Z,ITEMP
	BNE 36$
	TYA
	BPL 32$
	CMP I,NGLIMD-1
	BCS 35$
	LDA I,NGLIMD
	BMI 35$			;BRA
32$:	CMP I,PSLIMD
	BCC 35$
	LDA I,PSLIMD
35$:	TAY			;*** END DRIBBLER SPEED LIMIT
36$:	TYA
	LDY I,0
	ASL
	ASL
	ASL
	ASL
	ASL
	BCC 40$
	DEY
40$:	CLC
	ADC ZX,CHPPL
	STA ZX,CHPPL
	TYA
	ADC ZX,CHPHT
	STA ZX,CHPHT
				;NOW DO VERTICAL
	LDA ZX,TBVD
	LDY I,0
	ASL
	ASL
	ASL
	ASL
60$:
	BCC 70$
	DEY
70$:	CLC
	ADC ZX,CVPPL
	STA ZX,CVPPL
	TYA
	ADC ZX,CVPHT
	STA ZX,CVPHT
100$:	LDA I,0
	STA ZX,TBHD
	STA ZX,TBVD
	DEX
	BMI 105$
	JMP 1$
105$:	RTS
			;
SLEWIT:
	LDX I,PN
40$:	LDA ZX,OVRDFG
	BPL 65$			;BRANCH IF NOT TIME TO ADD HORIZONTAL
	LDA AX,PUTERH
60$:	STA ZX,TBHD		;OVERRIDE TRACKBALL READING
65$:	LDA ZX,OVRDFG
	ASL
	BPL 90$
	LDA AX,PUTERV
80$:	STA ZX,TBVD		;OVERRIDE TRACKBALL READING
90$:	DEX
	BPL 40$
	RTS
	.PAGE
	.SBTTL INTERRUPT ROUTINE (NMI)
	.REPT 0
*************************
*
*	BALINT
*
*************************
	DESCRIPTION:	NMI INTERRUPT ROUTINE.  CALLED 4 TIMES A
			FRAME.  HANDLES THE FOLLOWING:
				1) SOFTWARE WATCHDOG
				2) COIN ROUTINE (CALLS MOOLAH)
				3) READS TRACKBALLS/PROCESSES READINGS
	.ENDR
BALINT:
	CLD
	PHA
	TXA
	PHA
	TYA
	PHA
	LDA Z,ZSAFE
	CMP I,0
	BNE 105$
	LDA Z,ZSAFE+1
	CMP I,0
	BNE 105$
	JMP 5$			;PERMANENT PATCH ******************
	TSX			;SEE IF PC IS BETWEEN 2000 AND 4000
	LDA AX,106		;FETCH PCH FROM STACK
	CMP I,PRGMEM & 0FF00 / 100 +20
	BCS 105$		;CHANGE TO BCS 105$ FOR ROM
	CMP I,PRGMEM/100
	BCC 105$
5$:	LDA I,2			;ALWAYS 1C:1P
	STA Z,$CMODE
	JSR MOOLAH
				;HANDLE COIN COUNTER
	BCC 10$
	STA A,CCON
	BCS 11$
10$:	STA A,CCOFF		;MOOLAH RETURNS WITH C=1 IF IT HAS A VALID COIN
11$:	JSR CNTRLS
100$:	JSR TRAKBL		;DUMP COUNTS ACCUMULATED IN TBHD,TBVD INTO
				;MOTION OBJECT TEMPORIES SO THAT TBHD,TBVD
				;NEVER GET TOO BIG, THUS ALLOWING A MAXIMUM
				;MULTIPLY WITHOUT LOSING HIGH BITS.
	PLA
	TAY
	PLA
	TAX
	PLA
	RTI
105$:	JMP PWRON
				;
				;
				;THESE VCTRS INSTRUCS HAVE BEEN 
				;COMMENTED "OUT"
;	.VCTRS 0F7C3,BALINT
;	.VCTRS 03FFA,BALINT,PWRON,PWRON
	.END
                                                 